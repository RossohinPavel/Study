""" Упражнение 1
Вводится натуральное число N (то есть, положительное, целое). Требуется создать двумерный (вложенный) список
размером N x N элементов, состоящий из всех единиц, а затем, в последний столбец записать пятерки.
Вывести этот список на экран в виде таблицы чисел, как показано в примере ниже.
P.S. Будьте внимательны в конце строк пробелов быть не должно!
Sample Input: 4
Sample Output:
    1 1 1 5
    1 1 1 5
    1 1 1 5
    1 1 1 5
"""
n = int(input())
l = []
for i in range(n):
    ll = []
    for ii in range(n):
        ll.append(1)
    l.append(ll)
for i in range(n):
    l[i][n - 1] = 5
for i in l:
    print(*i)


""" Упражнение 2
Вводится список из URL-адресов (каждый с новой строки). Требуется в них заменить все пробелы на символ дефиса (-). 
Следует учесть, что может быть несколько подряд идущих пробелов. Результат преобразования вывести на экран 
в виде строк из URL-адресов.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
    django chto  eto takoe    poryadok ustanovki
    model mtv   marshrutizaciya funkcii  predstavleniya
    marshrutizaciya  obrabotka isklyucheniy       zaprosov perenapravleniya
Sample Output:
    django-chto-eto-takoe-poryadok-ustanovki
    model-mtv-marshrutizaciya-funkcii-predstavleniya
    marshrutizaciya-obrabotka-isklyucheniy-zaprosov-perenapravleniya
"""
import sys
lst_in = list(map(str.strip, sys.stdin.readlines()))
l = []
for i in lst_in:
    l.append('-'.join(i.split()))
for i in l:
    print(i)


""" Упражнение 3
Вводится натуральное число n. Необходимо найти все простые числа, которые меньше этого числа n, 
то есть, в диапазоне [2; n). Результат вывести на экран в строчку через пробел.
Sample Input: 11
Sample Output: 2 3 5 7
"""
a = int(input())
for i in range(2, a):
    flag = False
    for n in range(2, i + 1):
        if i % n == 0:
            if n == i:
                flag = True
            else:
                break
    if flag:
        print(i, end=' ')


""" Упражнение 4
Вводится двумерный список размерностью 5 х 5 элементов, состоящий из нулей и, в некоторых позициях, 
единиц (см. пример ввода ниже). Требуется проверить, не касаются ли единицы друг друга по горизонтали, 
вертикали и диагонали. То есть, вокруг каждой единицы должны быть нули. Если проверка проходит вывести ДА, иначе - НЕТ.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
    1 0 0 0 0
    0 0 1 0 1
    0 0 0 0 0
    0 1 0 1 0
    0 0 0 0 0
Sample Output: ДА
"""
import sys
s = sys.stdin.readlines()
lst_in = [list(map(int, x.strip().split())) for x in s]
flag = 'ДА'
for i, v in enumerate(lst_in):
    for n, w in enumerate(v):
        if w == 1:
            a1 = lst_in[i - 1][n - 1] if i > 0 and n > 0 else 0
            a2 = lst_in[i - 1][n] if i > 0 else 0
            a3 = lst_in[i - 1][n + 1] if i > 0 and n < len(v) - 1 else 0
            a4 = lst_in[i][n - 1] if n > 0 else 0
            a5 = lst_in[i][n + 1] if n < len(v) - 1 else 0
            a6 = lst_in[i + 1][n - 1] if i < len(v) - 1 and n > 0 else 0
            a7 = lst_in[i + 1][n] if i < len(v) - 1 else 0
            a8 = lst_in[i + 1][n + 1] if i < len(v) - 1 and n < len(v) - 1 else 0
            if 1 in (a1, a2, a3, a4, a5, a6, a7, a8):
                flag = 'НЕТ'
print(flag)


""" Упражнение 5
Вводится двумерный список размерностью 5 х 5 элементов, состоящий из целых чисел (пример ввода см. ниже). 
Проверьте, является ли этот двумерный список симметричным относительно главной диагонали. Главная диагональ — та, 
которая идёт из левого верхнего угла двумерного массива в правый нижний. Выведите на экран ДА, 
если матрица симметрична и НЕТ - в противном случае.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
    2 3 4 5 6
    3 2 7 8 9
    4 7 2 0 4
    5 8 0 2 1
    6 9 4 1 2
Sample Output: ДА
"""
import sys
s = sys.stdin.readlines()
lst_in = [list(map(int, x.strip().split())) for x in s]
flag = 'ДА'
for i , v in enumerate(lst_in):
    cl = []
    for n in range(len(lst_in)):
        cl.append(lst_in[n][i])
    if v != cl:
        flag = 'НЕТ'
print(flag)


""" Упражнение 6
Вводится список целых чисел в одну строку через пробел. Необходимо выполнить его сортировку выбором 
по возрастанию (неубыванию). Идея алгоритма очень проста и проиллюстрирована на рисунке ниже.
Вначале мы рассматриваем первый элемент списка и ищем второй минимальный относительно первого элемента (включая и его). 
На рисунке - это последний элемент со значением -1. Затем, меняем местами первый и последний элементы. 
Переходим ко второму элементу списка и повторяем эту же процедуру, но относительно второго элемента 
(то есть, первый уже не рассматриваем). На рисунке минимальный элемент - это 2, 
поэтому менять местами здесь ничего не нужно. Переходим к 3-му элементы со значением 6. 
Относительно него находим минимальный элемент - это 3. Меняем их местами. 
Вот идея алгоритма сортировки выбором. Реализуйте его для вводимого списка целых чисел. 
Результат выведите в виде списка чисел одну строку через пробел.
Sample Input: 8 11 -53 2 10 11
Sample Output: -53 2 8 10 11 11
"""
a = list(map(int, input().split()))
for i, v in enumerate(a):
    ind = 0
    val = v
    for n in range(i, len(a)):
        if a[n] <= val:
            val = a[n]
            ind = n
    a[i], a[ind] = a[ind], a[i]
print(*a)


""" Упражнение 7
Вводится список целых чисел в одну строку через пробел. Необходимо выполнить его сортировку по возрастанию (неубыванию) 
методом всплывающего пузырька. Идея алгоритма проста и показана на рисунке ниже.
При первом проходе перебираем все соседние пары элементов и если значение предыдущего элемента (слева) 
больше значения следующего (справа), то они меняются местами. (На рисунке 3 и 2 меняются местами). 
Следующая пара - это 3 и 6. Они уже выстроены по возрастанию, поэтому ничего не делаем и переходим к следующей 
паре 6 и -1. Меняем значения местами и видим, что на последнем месте находится максимальное значение 6, что нам и нужно.
При втором проходе делаем все то же самое, но доходим до предпоследнего элемента, так как последнее значение 6 уже 
отсортировано. На третьем проходе исключаем уже последние два элемента и так далее. 
То есть, в этом алгоритме достаточно сделать N-1 проходов, где N - длина списка.
Вот идея алгоритма сортировки всплывающего пузырька. Реализуйте его для вводимого списка целых чисел. 
Результат выведите в виде списка чисел одну строку через пробел.
Sample Input: 4 5 2 0 6 3 -56 3 -1
Sample Output: -56 -1 0 2 3 3 4 5 6
"""
a = list(map(int, input().split()))
ll = len(a) - 1
for i in range(ll):
    ind = ll - i
    wi = 0
    while wi < ind:
        if a[wi] > a[wi+1]:
            a[wi], a[wi+1] = a[wi+1], a[wi]
        wi += 1
print(*a)


""" Упражнение 8
В некоторой стране используются денежные купюры достоинством в 1, 2, 4, 8, 16, 32 и 64. Вводится натуральное число n. 
Как наименьшим количеством таких денежных купюр можно выплатить сумму n? Вывести на экран список купюр для формирования 
суммы n (в одну строчку через пробел, начиная с наибольшей и заканчивая наименьшей). Предполагается, что имеется 
достаточно большое количество купюр всех достоинств.
Sample Input: 221
Sample Output: 64 64 64 16 8 4 1
"""
a = int(input())
while a > 0:
    cup = 0
    for i in (64, 32, 16, 8, 4, 2, 1):
        if a - i >= 0:
            cup = i
            break
    a -= cup
    print(cup, end=' ')

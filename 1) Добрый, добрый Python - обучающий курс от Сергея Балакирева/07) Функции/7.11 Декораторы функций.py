""" Упражнение 1
Объявите функцию с именем get_sq, которая вычисляет площадь прямоугольника по двум параметрам: width и height - ширина и
высота прямоугольника. И возвращает результат (сама ничего на экран не выводит). То есть, функция имеет сигнатуру:
def get_sq(width, height): ...
Определите декоратор func_show для этой функции, который отображает результат на экране в виде строки (без кавычек):
"Площадь прямоугольника: <значение>"
Вызывать функцию и декоратор не нужно, только объявить. Применять декоратор к функции также не нужно.
Sample Input: 8 11
Sample Output: Площадь прямоугольника: 88
"""
def func_show(func):
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        print(f"Площадь прямоугольника: {res}")
    return wrapper
def get_sq(width, height):
    return width * height


""" Упражнение 2
На вход программы поступает строка с названиями пунктов меню, записанные в одну строчку через пробел. Необходимо задать 
функцию с именем get_menu, которая преобразует эту строку в список из слов и возвращает этот список. Сигнатура функции, 
следующая: def get_menu(s): ...
Определите декоратор для этой функции с именем show_menu, который отображает список на экран в формате:
1. Пункт_1
2. Пункт_1
...
N. Пункт_N
Примените декоратор show_menu к функции get_menu, используя оператор @. Более ничего в программе делать не нужно. 
Сами функции не вызывать.
Sample Input: Главная Добавить Удалить Выйти
Sample Output:
    1. Главная
    2. Добавить
    3. Удалить
    4. Выйти
"""
def show_menu(func):
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        n = 1
        for i in res:
            print(f'{n}. {i}')
            n += 1
    return wrapper
@show_menu
def get_menu(s):
    s = s.split()
    return s


""" Упражнение
На вход программы поступает строка из целых чисел, записанных через пробел. Напишите функцию get_list, которая 
преобразовывает эту строку в список из целых чисел и возвращает его. Определите декоратор для этой функции, который 
сортирует список чисел по возрастанию. Результат сортировки должен возвращаться при вызове декоратора.
Вызовите декорированную функцию get_list и отобразите полученный отсортированный список lst командой: print(*lst)
Sample Input: 8 11 -5 4 3 10
Sample Output: -5 3 4 8 10 11
"""
def sort_dec(func):
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        res.sort()
        return res
    return wrapper
@sort_dec
def get_list(l):
    return list(map(int, l.split()))
a = input()
lst = get_list(a)
print(*lst)


""" Упражнение 4
Вводятся две строки из слов (слова записаны через пробел). Объявите функцию, которая преобразовывает эти две строки в 
два списка слов и возвращает эти списки. Определите декоратор для этой функции, который из двух списков формирует 
словарь, в котором ключами являются слова из первого списка, а значениями - соответствующие элементы из второго списка. 
Полученный словарь должен возвращаться при вызове декоратора. Примените декоратор к первой функции и вызовите ее для 
введенных строк. Результат (словарь d) отобразите на экране командой: print(*sorted(d.items()))
Sample Input:
    house river tree car
    дом река дерево машина
Sample Output:
    ('car', 'машина') ('house', 'дом') ('river', 'река') ('tree', 'дерево')
"""
def dict_dec(func):
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        d = {res[0][x]: res[1][x] for x in range(len(res[0]))}
        return d
    return wrapper
@dict_dec
def get_lst(l1, l2):
    return list([l1.split(), l2.split()])
a = input()
b = input()
d = get_lst(a, b)
print(*sorted(d.items()))


""" Упражнение 5
Объявите функцию, которая принимает строку на кириллице и преобразовывает ее в латиницу, используя следующий словарь для 
замены русских букв на соответствующее латинское написание: t 
Функция должна возвращать преобразованную строку. Замены делать без учета регистра (исходную строку перевести в нижний 
регистр - малые буквы). Все небуквенные символы ": ;.,_" превращать в символ '-' (дефиса). Определите декоратор для этой 
функции, который несколько подряд идущих дефисов, превращает в один дефис. Полученная строка должна возвращаться при 
вызове декоратора. (Сам декоратор на экран ничего выводить не должен).
Примените декоратор к первой функции и вызовите ее для введенной строки s на кириллице: s = input()
Результат работы декорированной функции отобразите на экране.
Sample Input: Python - это круто!
Sample Output: python-eto-kruto!
"""
t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y',
     'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f',
     'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
def def_dec(func):
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        while res.count('--') > 0:
            res = res.replace('--', '-')
        return res
    return wrapper
@def_dec
def lat(s):
    s = s.lower()
    l = []
    for v in s:
        if v in t:
            l.append(t[v])
        elif v in (':',' ', ';', '.', ',', '_'):
            l.append('-')
        else:
            l.append(v)
    return ''.join(l)
s = input()
print(lat(s))

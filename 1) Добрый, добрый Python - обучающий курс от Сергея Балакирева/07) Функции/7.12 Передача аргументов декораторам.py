""" Упражнение 1
Вводится строка целых чисел через пробел. Напишите функцию, которая преобразовывает эту строку в список чисел и
возвращает их сумму. Определите декоратор для этой функции, который имеет один параметр start - начальное значение
суммы. Примените декоратор со значением start=5 к функции и вызовите декорированную функцию для введенной строки s:
s = input() Результат отобразите на экране.
Sample Input: 5 6 3 6 -4 6 -1
Sample Output: 26
"""
def sum_dec(start=0):
    def func_dec(func):
        def wrapper(*args, **kwargs):
            res = func(*args, **kwargs)
            return res + start
        return wrapper
    return func_dec
@sum_dec(start=5)
def l_sum(s):
    return sum(list(map(int, s.split())))
s = input()
print(l_sum(s))


""" Упражнение 2
Объявите функцию, которая возвращает переданную ей строку в нижнем регистре (с малыми буквами). 
Определите декоратор для этой функции, который имеет один параметр tag, определяющий строку с названием тега и начальным 
значением "h1". Этот декоратор должен заключать возвращенную функцией строку в тег tag и возвращать результат.
Пример заключения строки "python" в тег h1: <h1>python</h1>
Примените декоратор со значением tag="div" к функции и вызовите декорированную функцию для введенной строки s:
s = input()
Результат отобразите на экране.
Sample Input: Декораторы - это классно!
Sample Output: <div>декораторы - это классно!</div>
"""
def set_tag(tag='h1'):
    def dec(func):
        def wrapper(*args, **kwargs):
            res = func(*args, **kwargs)
            return f'<{tag}>{res}</{tag}>'
        return wrapper
    return dec
@set_tag(tag="div")
def s_lower(s):
    s = s.lower()
    return s
s = input()
print(s_lower(s))


""" Упражнение 3
Объявите функцию, которая принимает строку на кириллице и преобразовывает ее в латиницу, используя следующий словарь для 
замены русских букв на соответствующее латинское написание: t 
Функция должна возвращать преобразованную строку. Замены делать без учета регистра (исходную строку перевести в нижний 
регистр - малые буквы). Определите декоратор с параметром chars и начальным значением " !?", который данные символы 
преобразует в символ "-" и, кроме того, все подряд идущие дефисы (например, "--" или "---") приводит к одному дефису. 
Полученный результат должен возвращаться в виде строки. Примените декоратор с аргументом chars="?!:;,. " к функции и 
вызовите декорированную функцию для введенной строки s: s = input()
Результат отобразите на экране.
Sample Input: Декораторы - это круто!
Sample Output: dekoratory-eto-kruto-
"""
t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y',
     'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f',
     'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
def ch_rep(chars=" !?"):
    def dec(func):
        def wrapper(*args, **kwargs):
            res = func(*args, **kwargs)
            lres = [res[0]]
            li = 0
            for i in res[1:]:
                if i not in chars and i != '-':
                    lres.append(i)
                    li += 1
                else:
                    ch = '-'
                    if lres[li] != ch:
                        lres.append(ch)
                        li += 1
            return ''.join(lres)
        return wrapper
    return dec
@ch_rep()
def k_l(s):
    s = s.lower()
    l = []
    for i in s:
        if i in t:
            l.append(t[i])
        else:
            l.append(i)
    return ''.join(l)
s = input()
print(k_l(s))


""" Упражнение 4
Объявите функцию с именем get_list и следующим описанием в теле функции:
'''Функция для формирования списка целых значений'''
Сама функция должна формировать и возвращать список целых чисел, который поступает на ее вход в виде строки из целых 
чисел, записанных через пробел. Определите декоратор, который выполняет суммирование значений из списка этой функции и 
возвращает результат. Внутри декоратора декорируйте переданную функцию get_list с помощью команды @wraps (не забудьте 
сделать импорт: from functools import wraps). Такое декорирование необходимо, чтобы исходная функция get_list сохраняла 
свои локальные свойства: __name__ и __doc__. Примените декоратор к функции get_list, но не вызывайте ее.
"""
from functools import wraps
def sum_dec(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        res = func(*args, **kwargs)
        return sum(res)
    return wrapper
@sum_dec
def get_list(st):
    '''Функция для формирования списка целых значений'''
    return list(map(int, st.split()))

""" Упражнение 1
Объявите функцию, которая принимает один аргумент (вещественное число), и возвращает квадрат этого числа.
После объявления функции прочитайте (с помощью функции input) вещественное число и вызовите функцию с этим значением.
Выведите на экран результат работы функции.
Sample Input: 1.5
Sample Output: 2.25
"""


def f(flt):
    return flt ** 2


print(f(float(input())))

""" Упражнение 2
Объявите функцию с именем is_triangle, которая принимает три стороны треугольника (целые числа) и проверяет, можно ли 
из переданных аргументов составить треугольник. (Напомню, что у любого треугольника длина третьей стороны всегда должна 
быть меньше суммы двух других). Если  проверка проходит, вернуть булево значение True, иначе - значение False.
Вызывать функцию не нужно, только задать.
Sample Input: 3 4 5
Sample Output: True
"""


def is_triangle(a, b, c):
    if a > b:
        a, b = b, a
    if b > c:
        b, c = c, b
    return True if c < a + b else False


""" Упражнение 3
Объявите функцию с именем is_large, которая принимает строку (в качестве аргумента) и возвращает False, если длина 
строки меньше трех символов. Иначе возвращается значение True. Вызывать функцию не нужно, только объявить.
Sample Input: Я люблю Python!
Sample Output: True
"""


def is_large(st):
    return len(st) >= 3


""" Упражнение 4
Объявите функцию для проверки числа на четность (возвращается True, если переданное число четное и False, 
если число нечетное). После объявления функции в цикле необходимо считывать целое числовое значение (функцией input), 
пока не поступит число 1. Если прочитанное значение четное (проверяется с помощью заданной функции), то оно выводится 
на экран (в столбик, то есть, каждое значение с новой строки).
Sample Input: 2 / -4 / 5 / 7 / 10 / 1
Sample Output: 2 / -4 / 10
"""


def is_even(a):
    return a % 2 == 0


while 1:
    n = int(input())
    if n == 1:
        break
    else:
        if is_even(n):
            print(n)

""" Упражнение 5
Объявите функцию для проверки числа на нечетность (возвращается True, если переданное число нечетное и False, 
если число четное). После объявления функции прочитайте (с помощью функции input) список целых значений, 
записанных в одну строку через пробел. И, используя генератор списков и созданную функцию, сформируйте список из 
нечетных значений на основе введенного исходного списка. Результат отобразите на экране командой: print(*lst)
где lst - сформированный список из нечетных значений.
Sample Input: 8 11 -15 3 2 10
Sample Output: 11 -15 3
"""


def is_uneven(n):
    return n % 2 != 0


lst = [x for x in list(map(int, input().split())) if is_uneven(x)]
print(*lst)

""" Упражнение 6
Вводится слово в переменную tp. Если это слово RECT, то следует объявить функцию с именем get_sq с двумя параметрами, 
вычисляющую площадь прямоугольника и возвращающую вычисленное значение. (На экран она ничего не должна выводить, только 
возвращать значение). Если же введенное слово не RECT (любое другое), то объявляется функция с тем же именем get_sq, с 
одним параметром для вычисления площади квадрата (формула: a*a). Вычисленное значение возвращается функцией. 
(Она также ничего не выводит на экран). 
Примечание: в программе должна быть задана только одна функция с именем get_sq в зависимости от введенного слова. 
Вызывать функцию не нужно, только объявлять.
Sample Input: RECT
Sample Output: 10
"""
tp = input().strip()
if tp == 'RECT':
    def get_sq(a, b):
        return a * b
else:
    def get_sq(a):
        return a * a

""" Упражнение 7
Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает False, если длина строки меньше 
6 символов. Иначе возвращается значение True. После объявления функции прочитайте (с помощью функции input) 
список названий городов, записанных в одну строку через пробел. Затем, используя генератор списка и созданную функцию, 
сформируйте список из названий городов длиной не менее шести символов на основе введенного исходного списка. Результат 
отобразите на экране командой: print(*lst) где lst - итоговый сформированный список.
Sample Input: Москва Уфа Пермь Самара Вологда
Sample Output: Москва Самара Вологда
"""


def is_six(st):
    return len(st) >= 6


lst = [x for x in input().split() if is_six(x)]
print(*lst)

""" Упражнение 8
Объявите функцию, которая принимает строку (в качестве аргумента) и возвращает два значения в виде кортежа: 
переданная строка и ее длина. После объявления функции прочитайте (с помощью функции input) список названий городов, 
записанных в одну строку через пробел. Затем, используя генератор словарей и созданную функцию, сформируйте 
словарь d в формате: d = {<город 1>: <число символов>, ..., <город N>: <число символов>}
Выведите этот словарь в порядке возрастания длин строк с помощью команд: a = sorted(d, key=lambda x: d[x]) print(*a)
P. S. Пока просто запишите эти команды. Как они работают станет ясно позже, когда мы подробнее изучим функции 
сортировки и работу оператора *.
Sample Input: Воронеж Лондон Тверь Омск Уфа
Sample Output: Уфа Омск Тверь Лондон Воронеж
"""
def r_s(st):
    return st, len(st)
d = {r_s(x)[0]: r_s(x)[1] for x in input().split()}
a = sorted(d, key=lambda x: d[x])
print(*a)


""" Упражнение 9
Вводится список целых чисел в одну строчку через пробел. Необходимо задать функцию, которая принимает два аргумента 
(максимальное и минимальное значения из списка) и возвращает их произведение. Вызовите эту функцию и отобразите на 
экране полученное числовое значение.
Подсказка: для передачи аргументов функции используйте функции max и min для введенного списка чисел.
Sample Input: 56 34 -30 22 1 4 10
Sample Output: -1680
"""
def f(a, b):
    return a*b
c = list(map(int, input().split()))
print(f(max(c), min(c)))

""" Упражнение 1
Запишите выражение для генератора, который бы возвращал целые числа от 2 до 10 000 с шагом 1
(то есть, 2, 3, 4, ..., 10 000). Присвойте этот генератор переменной gen.
Вызывать генератор и отображать что-либо на экране не нужно, только задать его.
"""
gen = (x for x in range(2, 10001))


""" Упражнение 2
На вход программы поступают два целых числа a и b (a < b), записанные в одну строчку через пробел. На их основе запишите 
генератор для формирования квадратов чисел в диапазоне [a; b]. Преобразуйте этот генератор в кортеж чисел 
(без использования операторов циклов) и присвойте эту коллекцию переменной tp.
P. S. На экране ничего отображать не нужно, только создать кортеж на основе генератора.
"""
a, b = map(int, input().split())
tp = tuple((x ** 2 for x in range(a, b+1)))


""" Упражнение 3
На вход программы поступают два целых числа a и b (a < b), записанные в одну строчку через пробел. Определите генератор, 
который бы выдавал модули целых чисел из диапазона [a; b]. В цикле выведите первые пять значений этого генератора. 
Каждое значение с новой строки. (Гарантируется, что пять значений имеются).
Sample Input: -3 3
Sample Output: 3 / 2 / 1 / 0 / 1
"""
a, b = map(int, input().split())
gen = (abs(x) for x in range(a, b+1))
n = 0
while n < 5:
    print(next(gen))
    n += 1


""" Упражнение 4
Вводится целое положительное число a. Необходимо определить генератор, который бы возвращал модули чисел в диапазоне 
[-a; a], а затем еще один, который бы вычислял кубы чисел (возведение в степень 3), возвращаемых первым генератором.
Вывести в одну строчку через пробел первые четыре значения. (Полагается, что генератор выдает, как минимум 4 значения).
Sample Input: 3
Sample Output: 27 8 1 0
"""
a = int(input())
gen = (i ** 3 for i in (abs(x) for x in range(-a, a+1)))
n = 0
while n < 4:
    print(next(gen), end=' ')
    n += 1


""" Упражнение 5
Используя символы малых букв латинского алфавита (строка ascii_lowercase):
from string import ascii_lowercase
запишите генератор, который бы возвращал все сочетания из двух букв латинского алфавита. Выведите первые 50 сочетаний 
на экран в строку через пробел. Например, первые семь начальных сочетаний имеют вид: aa ab ac ad ae af ag
"""
from string import ascii_lowercase
gen = (f'{i}{x}' for i in ascii_lowercase for x in ascii_lowercase)
n = 0
while n < 50:
    print(next(gen), end=' ')
    n += 1

""" Упражнение 6
Имеется список из названий городов: cities = ["Москва", "Ульяновск", "Самара", "Уфа", "Омск", "Тула"]
Необходимо записать генератор, который бы используя этот список, выдавал 1 000 000 наименований городов по циклу. 
То есть, дойдя до конца списка, возвращался в начало и повторял перебор. И так, для выдачи миллиона названий. 
Вывести на экран первые 20 наименований городов с помощью генератора в одну строчку через пробел.
"""
cities = ["Москва", "Ульяновск", "Самара", "Уфа", "Омск", "Тула"]
gen = (cities[x % 6] for x in range(1000001))
n = 0
while n < 20:
    print(next(gen), end=' ')
    n += 1


""" Упражнение 7
Имеется график функции f(x) = 0.5x^2 - 2. Необходимо записать генератор, который бы выдавал значения этой функции для 
аргумента x в диапазоне [a; b] с шагом 0.01. Величины a, b вводятся с клавиатуры в одну строчку через пробел как целые 
числа (a< b). Вывести на экран первые 20 значений функции с точностью до сотых, взятых из генератора.
P.S. Значения функции вычислять командой: f(x) = 0.5 * pow(x, 2) - 2.0
Sample Input: 0 10
Sample Output:
-2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -2.0 -1.99 -1.99 -1.99 -1.99 -1.99 -1.99 -1.99 -1.98 -1.98
"""
a, b = map(int, input().split())
gen = (0.5 * pow((x/100), 2) - 2.0 for x in range(a * 100, b * 100 + 1))
n = 0
while n < 20:
    print(round(next(gen), 2), end=' ')
    n += 1

""" Упражнение 1
Напишите функцию convert_to_miles(km), которая принимает в качестве аргумента расстояние в километрах и возвращает
расстояние в милях. Формула для преобразования: мили = километры * 0.6214.
Примечание. Следующий программный код:
    print(convert_to_miles(1))
    print(convert_to_miles(5))
    print(convert_to_miles(10))
должен выводить:
    0.6214
    3.107
    6.214
"""
def convert_to_miles(km):
    return km * 0.6214
num = int(input())
print(convert_to_miles(num))


""" Упражнение 2
Напишите функцию get_days(month), которая принимает в качестве аргумента номер месяца и возвращает количество дней в 
данном месяце.
Примечание 1. Гарантируется, что передаваемый аргумент находится в диапазоне от 1 до 12.
Примечание 2. Считайте, что год является невисокосным.
Примечание 3. Следующий программный код:
    print(get_days(1))
    print(get_days(2))
    print(get_days(9))
должен выводить:
    31
    28
    30
"""
def get_days(month):
    if month in (1, 3, 5, 7, 8, 10, 12):
        return 31
    elif month in (4, 6, 9, 11):
        return 30
    else:
        return 28
num = int(input())
print(get_days(num))


""" Упражнение 3
Напишите функцию get_factors(num), принимающую в качестве аргумента натуральное число и возвращающую список всех 
делителей данного числа.
Примечание. Следующий программный код:
    print(get_factors(1))
    print(get_factors(5))
    print(get_factors(10))
должен выводить:
    [1]
    [1, 5]
    [1, 2, 5, 10]
"""
def get_factors(num):
    return [x for x in range(1, num+1) if num % x == 0]
n = int(input())
print(get_factors(n))


""" Упражнение 4
Напишите функцию number_of_factors(num), принимающую в качестве аргумента число и возвращающую количество делителей 
данного числа.
Примечание 1. Используйте уже реализованную функцию get_factors(num) из предыдущей задачи.
Примечание 2. Следующий программный код:
    print(number_of_factors(1))
    print(number_of_factors(5))
    print(number_of_factors(10))
должен выводить:
    1
    2
    4
"""
def number_of_factors(num):
    return len([x for x in range(1, num+1) if num % x == 0])
n = int(input())
print(number_of_factors(n))


""" Упражнение 5
Напомним, что строковый метод find('a') возвращает местоположение первого вхождения символа a в строке. Проблема 
заключается в том, что данный метод не находит местоположение всех символов а.
Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента: строку target и символ symbol и 
возвращает список, содержащий все местоположения этого символа в строке.
Примечание 1. Если указанный символ не встречается в строке, то следует вернуть пустой список.
Примечание 2. Следующий программный код:
    print(find_all('abcdabcaaa', 'a'))
    print(find_all('abcadbcaaa', 'e'))
    print(find_all('abcadbcaaa', 'd'))
должен выводить:
    [0, 4, 7, 8, 9]
    []
    [4]
"""
def find_all(target, symbol):
    return [x for x in range(len(target)) if target[x] == symbol]
s = input()
char = input()
print(find_all(s, char))


""" Упражнение 6
Напишите функцию merge(list1, list2), которая принимает в качестве аргументов два отсортированных по возрастанию списка, 
состоящих из целых чисел, и объединяет их в один отсортированный список.
Примечание 1. Списки list1 и list2 могут иметь разную длину.
Примечание 2. Можно использовать списочный метод sort(), а можно обойтись и без него.
Примечание 3. Следующий программный код:
    print(merge([1, 2, 3], [5, 6, 7, 8]))
    print(merge([1, 7, 10, 16], [5, 6, 13, 20]))
должен выводить:
    [1, 2, 3, 5, 6, 7, 8]
    [1, 5, 6, 7, 10, 13, 16, 20]
"""
def merge(list1, list2):
    return sorted(list1 + list2)
numbers1 = [int(c) for c in input().split()]
numbers2 = [int(c) for c in input().split()]
print(merge(numbers1, numbers2))


""" Упражнение 7
На вход программе подается число nn, а затем nn строк, содержащих целые числа в порядке возрастания. Из данных строк 
формируются списки чисел. Напишите программу, которая объединяет указанные списки в один отсортированный список с 
помощью функции quick_merge(), а затем выводит его.
Формат входных данных
На вход программе подается натуральное число nn, а затем nn строк, содержащих целые числа в порядке возрастания, 
разделенные символом пробела.
Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.
Sample Input 1:
    3
    1 2 3 4
    5 6 7
    10 11 17
Sample Output 1:
    1 2 3 4 5 6 7 10 11 17
Sample Input 2:
    4
    10 20
    1 15
    5 17
    8 13 19
Sample Output 2:
    1 5 8 10 13 15 17 19 20
"""
def quick_merge(lst):
    return sorted(lst)
a = int(input())
l = [int(y) for _ in range(a) for y in input().split()]
print(*quick_merge(l))

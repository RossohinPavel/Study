""" Упражнение 1
Напишите функцию count_args(), которая принимает произвольное количество аргументов и возвращает количество
переданных в нее аргументов.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
Примечание 2. Следующий программный код:
    print(count_args())
    print(count_args(10))
    print(count_args('stepik', 'beegeek'))
    print(count_args([], (''), 'a', 12, False))
должен выводить:
    0
    1
    2
    5
"""
def count_args(*args):
    return len(args)


""" Упражнение 2
Напишите функцию sq_sum(), которая принимает произвольное количество числовых аргументов и возвращает сумму их квадратов.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
Примечание 2. Следующий программный код:
    print(sq_sum())
    print(sq_sum(2))
    print(sq_sum(1.5, 2.5))
    print(sq_sum(1, 2, 3))
    print(sq_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
должен выводить:
    0
    4
    8.5
    14
    385
"""
def sq_sum(*args):
    return sum([x**2 for x in args])


""" Упражнение 3
Напишите функцию mean(), которая принимает произвольное количество аргументов и возвращает среднее арифметическое 
переданных в нее числовых (int или float) аргументов.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
Примечание 2. Функция должна игнорировать аргументы всех типов, кроме int или float.
Примечание 3. Следующий программный код:
    print(mean())
    print(mean(7))
    print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
    print(mean(True, ['stepik'], 'beegeek', (1, 2)))
    print(mean(-1, 2, 3, 10, ('5')))
    print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
должен выводить:
    0.0
    7.0
    2.0
    0.0
    3.5
    5.5
Примечание 4. Для проверки типа можно использовать встроенную функцию type().
"""
def mean(*args):
    l = []
    for i in args:
        if type(i) in (int, float):
            l.append(i)
    return sum(l) / len(l) if l else 0.0


""" Упражнение 4
Напишите функцию greet(), которая принимает произвольное количество аргументов строк имен (как минимум одно) и 
возвращает приветствие в соответствии с образцом.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
Примечание 2. Следующий программный код:
    print(greet('Timur'))
    print(greet('Timur', 'Roman'))
    print(greet('Timur', 'Roman', 'Ruslan'))
должен выводить:
    Hello, Timur!
    Hello, Timur and Roman!
    Hello, Timur and Roman and Ruslan!
Примечание 3. Функция greet() должна принимать как минимум один обязательный аргумент!
"""
def greet(fn, *args):
    st = f'Hello, {fn}'
    for i in args:
        st = st + f' and {i}'
    return st + '!'


""" Упражнение 5
Напишите функцию print_products(), которая принимает произвольное количество аргументов и выводит список продуктов 
(любая непустая строка) по образцу: <номер продукта>) <название продукта> (нумерация продуктов начинается с единицы). 
Если среди переданных аргументов нет ни одного продукта, необходимо вывести текст Нет продуктов.
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
Примечание 2. Числа, списки, кортежи, словари, множества и другие нестроковые объекты продуктами не являются и их 
нужно игнорировать.
Примечание 3. Следующий программный код:
print_products('Бананы', [1, 2], ('Stepik',), 'Яблоки', '', 'Макароны', 5, True)
должен выводить:
    1) Бананы
    2) Яблоки
    3) Макароны
Следующий программный код:
    print_products([4], {}, 1, 2, {'Beegeek'}, '') 
должен выводить:
    Нет продуктов
Примечание 4. Обратите внимание: функция print_products() должна выводить (печатать) нужное значение, а не возвращать его.
Примечание 5. Вызывать функцию print_products() не нужно, требуется только реализовать.
"""
def print_products(*args):
    l = []
    for i in args:
        if type(i) is str and i:
            l.append(i)
    if l:
        for i in range(len(l)):
            print(f'{1+i}) {l[i]}')
    else:
        print('Нет продуктов')


""" Упражнение 6
Напишите функцию info_kwargs(), которая принимает произвольное количество именованных аргументов и печатает именованные 
аргументы в соответствии с образцом: <имя аргумента>: <значение аргумента>, при этом имена аргументов следуют 
в алфавитном порядке (по возрастанию).
Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество именованных 
аргументов.
Примечание 2. Следующий программный код:
    info_kwargs(first_name='Timur', last_name='Guev', age=28, job='teacher') 
должен выводить:
    age: 28
    first_name: Timur
    job: teacher
    last_name: Guev
"""
def info_kwargs(**kwargs):
    for n in sorted(kwargs):
        print(f'{n}: {kwargs[n]}')

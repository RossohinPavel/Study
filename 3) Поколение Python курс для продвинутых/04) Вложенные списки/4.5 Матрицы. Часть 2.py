""" Упражнение 1
На вход программе подаются два натуральных числа nn и mm — количество строк и столбцов в матрице. Создайте матрицу mult
размером n×m и заполните её таблицей умножения по формуле mult[i][j] = i * j.
Формат входных данных
На вход программе на разных строках подаются два числа nn и mm — количество строк и столбцов в матрице.
Формат выходных данных
Программа должна вывести таблицу умножения отводя на вывод каждого числа ровно 3 символа (для этого используйте
строковый метод ljust()).
Sample Input 1:
    4
    6
Sample Output 1:
    0  0  0  0  0  0
    0  1  2  3  4  5
    0  2  4  6  8  10
    0  3  6  9  12 15
"""
row, el = int(input()), int(input())
l = [[y*x for y in range(el)] for x in range(row)]
for i in l:
    for n in i:
        print(str(n).ljust(3), end='')
    print()


""" Упражнение 2
На вход программе подаются два натуральных числа nn и mm — количество строк и столбцов в матрице, затем n строк по 
m целых чисел в каждой, отделенных символом пробела.
Напишите программу, которая находит индексы (строку и столбец) первого вхождения максимального элемента.
Формат входных данных
На вход программе на разных строках подаются два числа nn и mm — количество строк и столбцов в матрице, затем сами 
элементы матрицы построчно через пробел.
Формат выходных данных
Программа должна вывести два числа: номер строки и номер столбца, в которых стоит наибольший элемент таблицы. 
Если таких элементов несколько, то выводится тот, у которого меньше номер строки, а если номера строк равны то тот, 
у которого меньше номер столбца.
Примечание. Считайте, что нумерация строк и столбцов начинается с нуля.
Sample Input 1:
    3
    4
    0 3 2 4
    2 3 5 5
    5 1 2 3
Sample Output 1:
    1 2
Sample Input 2:
    3
    3
    5 3 4
    2 3 0
    4 1 5
Sample Output 2:
    0 0
Sample Input 3:
    2
    8
    4 3 4 4 1 2 2 3
    2 3 0 3 3 4 4 5
"""
n, el = int(input()), int(input())
m = list(map(lambda _: list(map(int, input().split())), range(n)))
mx = max([max(x) for x in m])
for i in range(len(m)):
    if mx in m[i]:
        print(i, m[i].index(mx))
        break


""" Упражнение 3
Напишите программу, которая меняет местами столбцы в матрице.
Формат входных данных
На вход программе на разных строках подаются два натуральных числа n и m — количество строк и столбцов в матрице, 
затем элементы матрицы построчно через пробел, затем числа i и j — номера столбцов, подлежащих обмену.
Формат выходных данных
Программа должна вывести указанную таблицу с замененными столбцами.
Sample Input 1:
    3
    4
    11 12 13 14
    21 22 23 24
    31 32 33 34
    0 1
Sample Output 1:
    12 11 13 14
    22 21 23 24
    32 31 33 34
Sample Input 2:
    3
    3
    11 12 13
    21 22 23
    31 32 33
    2 1
Sample Output 2:
    11 13 12 
    21 23 22 
    31 33 32 
"""
n, el = int(input()), int(input())
m = list(map(lambda _: list(map(int, input().split())), range(n)))
s1, s2 = map(int, input().split())
for i in range(len(m)):
    m[i][s1], m[i][s2] = m[i][s2], m[i][s1]
for i in m:
    print(*i)


""" Упражнение 4
Напишите программу, которая проверяет симметричность квадратной матрицы относительно главной диагонали.
Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы
построчно через пробел.
Формат выходных данных
Программа должна вывести YES, если матрица симметрична относительно главной диагонали, и слово NO в противном случае.
Sample Input 1:
    3
    0 1 2
    1 2 3
    2 3 4
Sample Output 1:
    YES
Sample Input 2:
    3
    0 1 2
    1 2 7
    2 3 4
Sample Output 2:
    NO
"""
n = int(input())
m = list(map(lambda _: list(map(int, input().split())), range(n)))
flag = True
for i in range(n):
    for x in range(0, i+1):
        if m[i][x] != m[x][i]:
            flag = False
print('YES' if flag else 'NO')


""" Упражнение 5
Дана квадратная матрица чисел. Напишите программу, которая меняет местами элементы, стоящие на главной и побочной 
диагонали, при этом каждый элемент должен остаться в том же столбце (то есть в каждом столбце нужно поменять местами 
элемент на главной диагонали и на побочной диагонали).
Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел.
Формат выходных данных
Программа должна вывести матрицу с элементами главной и побочной диагонали, поменявшимися своими местами.
Sample Input 1:
    3
    1 2 3
    4 5 6
    7 8 9
Sample Output 1:
    7 2 9 
    4 5 6 
    1 8 3 
Sample Input 2:
    2
    1 2
    4 5
Sample Output 2:
    4 5
    1 2
"""
n = int(input())
m = list(map(lambda _: list(map(int, input().split())), range(n)))
for i in range(n):
    m[i][i], m[n-i-1][i] = m[n-i-1][i], m[i][i]
for i in m:
    print(*i)


""" Упражнение 6
Дана квадратная матрица чисел. Напишите программу, которая зеркально отображает её элементы относительно 
горизонтальной оси симметрии.
Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел.
Формат выходных данных
Программа должна вывести матрицу в которой зеркально отображены элементы относительно горизонтальной оси симметрии.
Sample Input 1:
    4
    1 2 3 4
    5 6 7 8
    8 6 4 2
    3 4 5 6
Sample Output 1:
    3 4 5 6
    8 6 4 2
    5 6 7 8
    1 2 3 4
Sample Input 2:
    3
    1 2 3
    4 5 6
    7 8 9
Sample Output 2:
    7 8 9
    4 5 6
    1 2 3
Sample Input 3:
    2
    1 1
    1 1
Sample Output 3:
    1 1
    1 1
"""
n = int(input())
m = list(map(lambda _: list(map(int, input().split())), range(n)))
for i in range(n // 2):
    m[i], m[n-i-1] = m[n-i-1], m[i]
for i in m:
    print(*i)


""" Упражнение 7
Напишите программу, которая поворачивает квадратную матрицу чисел на 90∘ по часовой стрелке.
Формат входных данных
На вход программе подаётся натуральное число nn — количество строк и столбцов в матрице, затем элементы матрицы 
построчно через пробел.
Формат выходных данных
Программа должна вывести результат на экран, числа должны быть разделены одним пробелом.
Sample Input 1:
    3
    1 2 3
    4 5 6
    7 8 9
Sample Output 1:
    7 4 1 
    8 5 2 
    9 6 3 
Sample Input 2:
    4
    1 9 4 2
    3 8 1 5
    6 7 4 6
    1 9 7 8
Sample Output 2:
    1 6 3 1
    9 7 8 9
    7 4 1 4
    8 6 5 2
"""
n = int(input())
m = list(map(lambda _: list(map(int, input().split())), range(n)))
mr = [reversed([m[y][x] for y in range(n)]) for x in range(n)]
for i in mr:
    print(*i)


""" Упражнение 8
На шахматной доске 8×8 стоит конь. Напишите программу, которая отмечает положение коня на доске и все клетки, 
которые бьет конь. Клетку, где стоит конь, отметьте английской буквой N, клетки, которые бьет конь, отметьте 
символами *, остальные клетки заполните точками.
Формат входных данных
На вход программе подаются координаты коня на шахматной доске в шахматной нотации (то есть в виде e4, где сначала 
записывается номер столбца (буква от a до h, слева направо), затем номеру строки (цифра от 1 до 8, снизу вверх)).
Формат выходных данных
Программа должна вывести на экран изображение доски, разделяя элементы пробелами.
Примечание. Шахматная доска имеет вид:
"""
def is_move(p1, p2, m1, m2):
    return (abs(p1-m1) == 1 and abs(p2-m2) == 2) or (abs(p1-m1) == 2 and abs(p2-m2) == 1)
dct = {'a':0, 'b':1, 'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,}
b, c = [x for x in input()]
deck = [['.'] * 8 for _ in range(8)]
deck[int(c)-1][dct[b]] = 'N'
for i in range(8):
    for n in range(8):
        if is_move(int(c)-1, dct[b], i, n):
            deck[i][n] = '*'
for i in range(len(deck)-1, -1, -1):
    print(*deck[i])


""" Упражнение 9
Магическим квадратом порядка nn называется квадратная таблица размера n×n, 
составленная из всех чисел 1, 2, 3, …, n так, что суммы по каждому столбцу, каждой строке и каждой из двух диагоналей 
равны между собой. Напишите программу, которая проверяет, является ли заданная квадратная матрица магическим квадратом.
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, 
затем элементы матрицы: n строк, по nn чисел в каждой, разделённые пробелами.
Формат выходных данных
Программа должна вывести слово YES, если матрица является магическим квадратом, и слово NO в противном случае.
Sample Input 1:
    3
    8 1 6
    3 5 7
    4 9 2
Sample Output 1:
    YES
Sample Input 2:
    3
    8 2 6
    3 5 7
    4 9 1
Sample Output 2:
    NO
Sample Input 3:
    3
    4 9 2
    3 5 7
    8 1 6
Sample Output 3:
    YES
"""
n = int(input())
m = list(map(lambda _: list(map(int, input().split())), range(n)))
q = sum(m[0])
flag = True
z = [m[x][y] for x in range(n) for y in range(n)]
if len(z) != len(set(z)):
    flag = False
if 0 in z:
    flag = False
if flag:
    for i in range(n):
        if sum(m[i]) != q:
            flag = False
        if sum([m[y][i] for y in range(n)]) != q:
            flag = False
    if q != sum([m[x][x] for x in range(n)]):
        flag = False
    if q != sum([m[n-1-x][n-1-x] for x in range(n)]):
        flag = False

print('YES' if flag else 'NO')

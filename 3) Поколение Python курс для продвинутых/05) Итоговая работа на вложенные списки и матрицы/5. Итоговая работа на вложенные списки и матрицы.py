""" Упражнение 1
На вход программе подается строка текста, содержащая символы и число n. Из данной строки формируется список.
Напишите программу, которая разделяет список на вложенные подсписки так, что n последовательных элементов принадлежат
разным подспискам.
Формат входных данных
На вход программе подается строка текста, содержащая символы, отделенные символом пробела и число n на отдельной строке.
Формат выходных данных
Программа должна вывести указанный вложенный список.
Sample Input 1:
    a b c d e f g h i j k l m n
    3
Sample Output 1:
    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
Sample Input 2:
    a b c d e f g h i j k l m n
    2
Sample Output 2:
    [['a', 'c', 'e', 'g', 'i', 'k', 'm'], ['b', 'd', 'f', 'h', 'j', 'l', 'n']]
"""
st = input().split()
n = int(input())
lst = [[] for _ in range(n)]
for i in range(len(st)):
    lst[i%n].append(st[i])
print(lst)


""" Упражнение 2
Максимальный в области 2
Напишите программу, которая выводит максимальный элемент в заштрихованной области квадратной матрицы.
----------
|      //|
|    //xx|
|  //xxxx|
|//xxxxxx|
----------
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.
Формат выходных данных
Программа должна вывести одно число — максимальный элемент в заштрихованной области квадратной матрицы.
Примечание. Элементы побочной диагонали также учитываются.
Sample Input 1:
    3
    1 4 5
    6 7 8
    1 1 6
Sample Output 1:
    8
Sample Input 2:
    4
    0 1 4 6
    0 0 2 5
    0 0 0 7
    0 0 0 0
Sample Output 2:
    7
"""
n = int(input())
mat = [list(map(int, input().split())) for _ in range(n)]
mx = 0
for i in range(n):
    for j in range(n):
        if (i <= j and i >= n-1-j) or (i >= j and i >= n-1-j):
            if mx < mat[i][j]:
                mx = mat[i][j]
print(mx)


""" Упражнение 3
Напишите программу, которая транспонирует квадратную матрицу.
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.
Формат выходных данных
Программа должна вывести транспонированную матрицу.
Примечание 1. Транспонированная матрица — матрица, полученная из исходной матрицы заменой строк на столбцы.
Примечание 2. Задачу можно решить без использования вспомогательного списка. 
Sample Input 1:
    3
    1 2 3
    4 5 6
    7 8 9
Sample Output 1:
    1 4 7
    2 5 8
    3 6 9
"""
n = int(input())
mat = [list(map(int, input().split())) for _ in range(n)]
for i in range(n):
    for j in range(n):
        if i > j:
            mat[i][j], mat[j][i] = mat[j][i], mat[i][j]
for i in mat:
    print(*i)


""" Упражнение 4
На вход программе подается нечетное натуральное число n. Напишите программу, которая создает матрицу размером n×n 
заполнив её символами . . Затем заполните символами * среднюю строку и столбец матрицы, главную и побочную диагональ 
матрицы. Выведите полученную матрицу на экран, разделяя элементы пробелами.
Формат входных данных
На вход программе подается нечетное натуральное число (n≥3) — количество строк и столбцов в матрице.
Формат выходных данных
Программа должна вывести матрицу в соответствии с условием задачи.
Sample Input 1:
    5
Sample Output 1:
    * . * . *
    . * * * .
    * * * * *
    . * * * .
    * . * . *
"""
a = int(input())
mat = [['.'] * a for _ in range(a)]
for i in range(a):
    mat[i][i] = '*'
    mat[i][a-i-1] = '*'
    mat[i][a // 2] = '*'
    if i == a // 2:
        mat[i] = ['*']*a
for i in mat:
    print(*i)


""" Упражнение 5
Напишите программу проверки симметричности квадратной матрицы относительно побочной диагонали.
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы.
Формат выходных данных
Программа должна вывести YES, если матрица симметрична, и слово NO в противном случае.
Sample Input 1:
    3
    0 3 10
    4 9 3
    7 4 0
Sample Output 1:
    YES
Sample Input 2:
    3
    0 1 2
    1 2 7
    2 3 4
Sample Output 2:
    NO
"""
n = int(input())
mat = [list(map(int, input().split())) for _ in range(n)]
flag = True
for i in range(n):
    for j in range(n):
        if i > n-1-j:
            if mat[i][j] != mat[n-1-j][n-1-i]:
                flag = False
print('YES' if flag else 'NO')


""" Упражнение 6
Латинским квадратом порядка n называется квадратная матрица размером n×n, каждая строка и каждый столбец которой 
содержат все числа от 11 до nn. Напишите программу, которая проверяет, является ли заданная квадратная матрица 
латинским квадратом.
Формат входных данных
На вход программе подаётся натуральное число n — количество строк и столбцов в матрице, затем элементы матрицы: 
n строк, по nn чисел в каждой, разделённые пробелами.
Формат выходных данных
Программа должна вывести слово YES, если матрица является латинским квадратом, и слово NO, если не является.
Sample Input 1:
    4
    2 3 4 1
    3 4 1 2
    4 1 2 3
    1 2 3 4
Sample Output 1:
    YES
Sample Input 2:
    3
    1 2 3
    3 2 1
    2 3 4
Sample Output 2:
    NO
"""
n = int(input())
mat = [list(map(int, input().split())) for _ in range(n)]
comp = list(range(1, n+1))
flag = True
for i in range(n):
    if len(mat[i]) != len(set(mat[i])):
        flag = False
    if sorted(mat[i]) != comp:
        flag = False
    st = [mat[x][i] for x in range(n)]
    if sorted(st) != comp:
        flag = False
print('YES' if flag else 'NO')


""" Упражнение 7
На шахматной доске 8×8 стоит ферзь. Отметьте положение ферзя на доске и все клетки, которые бьет ферзь. 
Клетку, где стоит ферзь, отметьте буквой Q, клетки, которые бьет ферзь, отметьте символами *, 
остальные клетки заполните точками.
Формат входных данных
На вход программе подаются координаты ферзя на шахматной доске в шахматной нотации (то есть в виде e4, 
где сначала записывается номер столбца (буква от a до h, слева направо), затем номер строки 
(цифра от 11 до 88, снизу вверх)).
Формат выходных данных
Программа должна вывести на экран изображение доски, разделяя элементы пробелами.
Sample Input 1: c4
Sample Output 1:
    . . * . . . * .
    . . * . . * . .
    * . * . * . . .
    . * * * . . . .
    * * Q * * * * *
    . * * * . . . .
    * . * . * . . .
    . . * . . * . .
"""
dct = {'a':0, 'b':1, 'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,}

b, c = [x for x in input()]
deck = [['.']* 8 for _ in range(8)]
c = int(c)
b = dct[b]


def is_move(p1, p2, m1, m2):
    return (abs(p1-m1) == abs(p2-m2)) or (p1 == m1 or p2 == m2)


for i in range(8):
    for j in range(8):
        if is_move(c-1, b, i, j):
            deck[i][j] = '*'

deck[c-1][b] = 'Q'

for i in range(len(deck)-1, -1, -1):
    print(*deck[i])


""" Упражнение 8
На вход программе подается натуральное число n. Напишите программу, которая создает матрицу размером n×n и заполняет
 её по следующему правилу:
    на главной диагонали на месте каждого элемента должно стоять число 0;
    на двух диагоналях, прилегающих к главной, число 1;
    на следующих двух диагоналях число 2, и т.д.
    Формат входных данных
На вход программе подается натуральное число n — количество строк и столбцов в матрице.
Формат выходных данных
Программа должна вывести матрицу в соответствии с условием задачи.
Sample Input 1: 5
Sample Output 1:
    0 1 2 3 4
    1 0 1 2 3
    2 1 0 1 2
    3 2 1 0 1
    4 3 2 1 0
Sample Input 2:
    2
Sample Output 2:
    0 1
    1 0
"""
n = int(input())
mat = [[0] * n for _ in range(n)]
c = 0
while c < n:
    for i in range(c, n):
        for j in range(0, i-c+1):
            if i > j:
                mat[i][j] = c
                mat[j][i] = c
    c += 1

for i in mat:
    print(*i)

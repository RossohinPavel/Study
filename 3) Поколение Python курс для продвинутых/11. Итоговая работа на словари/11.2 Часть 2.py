""" Упражнение 1
Как известно из курса биологии ДНК и РНК – последовательности нуклеотидов.
Четыре нуклеотида в ДНК:
    аденин (A);
    цитозин (C);
    гуанин (G);
    тимин (T).
Четыре нуклеотида в РНК:
    аденин (A);
    цитозин (C);
    гуанин (G);
    урацил (U).
Цепь РНК строится на основе цепи ДНК последовательным присоединением комплементарных нуклеотидов:
    G → C;
    C → G;
    T → A;
    A → U.
Напишите программу, переводящую цепь ДНК в цепь РНК.
Формат входных данных
На вход программе подается корректная цепь ДНК в верхнем регистре.
Формат выходных данных
Программа должна вывести соответствующую цепь РНК в верхнем регистре.
Примечание. Подробнее прочитать про ДНК и РНК можно тут и тут.
Sample Input 1: ACTG
Sample Output 1: UGAC
Sample Input 2: CC
Sample Output 2: GG
"""
mod = {'A': 'U', 'C': 'G', 'G': 'C', 'T': 'A'}
print(*[mod[x] for x in input()], sep='')


""" Упражнение 2
Дана строка текста на русском языке, состоящая из слов и символов пробела. Словом считается последовательность букв, 
слова разделены одним пробелом или несколькими.
Напишите программу, определяющую для каждого слова порядковый номер его вхождения в текст именно в этой форме, с учетом 
регистра. Для первого вхождения слова программа выведет 11, для второго вхождения того же слова — 22 и т. д.
Формат входных данных
Программа получает на вход единственную строку текста, состоящую только из русских букв и символов пробела. 
Формат выходных данных
Для каждого слова исходного текста программа выводит одно целое число — номер вхождения этого слова в текст. 
Числа необходимо вывести на одной строке через пробел.
Примечание. Количество чисел должно совпадать с количеством слов исходного текста.
Sample Input 1: прием Хьюстон Хьюстон как слышно прием меня слышно прием хьюстон
Sample Output 1: 1 1 2 1 1 2 1 2 3 1
Sample Input 2: Привет что делаешь что нового что с работой как там с деньгами
Sample Output 2: 1 1 1 2 1 3 1 1 1 1 2 1
"""
dct = {}
for i in input().split():
    if i in dct:
        dct[i] += 1
    else:
        dct[i] = 1
    print(dct[i], end=' ')


""" Упражнение 3
В игре Scrabble каждая буква приносит определенное количество баллов. Общая стоимость слова – сумма баллов его букв. 
Чем реже буква встречается, тем больше она ценится:
    Баллы	Буква
    1	AA, EE, II, LL, NN, OO, RR, SS, TT, UU
    2	DD, GG
    3	BB, CC, MM, PP
    4	FF, HH, VV, WW, YY
    5	KK
    8	JJ, XX
    10	QQ, ZZ
Напишите программу подсчета итоговой стоимости введенного слова.
Формат входных данных
На вход программе подается одно слово в верхнем регистре на английском языке.
Формат выходных данных
Программа должна вывести суммарную стоимость букв введеного слова.
Примечание. Подробнее про игру можно почитать тут.
Sample Input 1: DANSER
Sample Output 1: 7
Sample Input 2: FRESHENER
Sample Output 2: 15
Sample Input 3: ZIP
Sample Output 3: 14
"""
d = {1: "AEILNORSTU", 2: "DG", 3: "BCMP", 4: "FHVWY", 5: "K", 8: "JX", 10: "QZ"}
c = 0
for i in input():
    for k, v in d.items():
        if i in v:
            c += k
print(c)


""" Упражнение 4
Строка запроса (query string) — часть URL адреса, содержащая ключи и их значения. Она начинается после вопросительного 
знака и идет до конца адреса. Например: 
    https://beegeek.ru?name=timur     # строка запроса: name=timur
Если параметров в строке запроса несколько, то они отделяются символом амперсанда &:
    https://beegeek.ru?name=timur&color=green     # строка запроса: name=timur&color=green 
Напишите функцию build_query_string(), которая принимает на вход словарь с параметрами и возвращает строку запроса, 
сформированную из этих параметров.
Примечание 1. В итоговой строке параметры должны быть отсортированы в лексикографическом порядке ключей словаря.
Примечание 2. Следующий программный код:
    print(build_query_string({'name': 'timur', 'age': 28}))
    print(build_query_string({'sport': 'hockey', 'game': 2, 'time': 17}))
должен выводить:
    age=28&name=timur
    game=2&sport=hockey&time=17
Примечание 3. Вызывать функцию build_query_string() не нужно, требуется только реализовать. 
"""
def build_query_string(params):
    return '&'.join(sorted([f'{k}={v}' for k, v in params.items()]))


""" Упражнение 5
Напишите функцию merge(), объединяющую словари в один общий. Функция должна принимать список словарей и возвращать 
словарь, каждый ключ которого содержит множество (тип данных set) уникальных значений собранных из всех словарей 
переданного списка.
Примечание 1. Следующий программный код:
    result = merge([{'a': 1, 'b': 2}, {'b': 10, 'c': 100}, {'a': 1, 'b': 17, 'c': 50}, {'a': 5, 'd': 777}])
создает словарь:
    result = {'a': {1, 5}, 'b': {2, 10, 17}, 'c': {50, 100}, 'd': {777}}
Примечание 2. Вызывать функцию merge() не нужно, требуется только реализовать. 
Примечание 3. Слияние пустых словарей должно быть пустым словарем.
"""
def merge(values):      # values - это список словарей
    dct = {}
    for i in values:
        for k, v in i.items():
            if k in dct:
                dct[k] |= {v}
            else:
                dct[k] = {v}
    return dct


""" Упражнение 6
В файловую систему компьютера, на котором развернута наша платформа Stepik, проник опасный вирус и сломал контроль 
прав доступа к файлам. Говорят, вирус написал один из студентов курса Python для начинающих.
Для каждого файла известно, с какими действиями можно к нему обращаться:
    запись W (write, доступ на запись в файл);
    чтение R (read, доступ на чтение из файла);
    запуск X (execute, запуск на исполнение файла).
Напишите программу для восстановления контроля прав доступа к файлам. Ваша программа для каждого запроса должна будет 
возвращать OK если выполняется допустимая операция, и Access denied, если операция недопустима.
Формат входных данных
Программа получает на вход количество файлов n, содержащихся в файловой системе компьютера. Далее идет n строк, на 
каждой имя файла и допустимые с ним операции, разделенные символом пробела. В следующей строке записано 
число m — количество запросов к файлам, и затем mm строк с запросами вида операция файл. Одному и тому же файлу может 
быть адресовано любое количество запросов.
Формат выходных данных
Программа должна вывести для каждого из mm запросов в отдельной строке Access denied или OK.

Sample Input 1:
    5
    my_pycode.exe W X
    log_n X W R
    ave R
    lucky_m W R
    dnsss.py W
    6
    execute ave
    read dnsss.py
    write log_n
    execute log_n
    read ave
    write my_pycode.exe
Sample Output 1:
    Access denied
    Access denied
    OK
    OK
    OK
    OK
Sample Input 2:
    2
    marvel_movies X
    dc_com X R
    2
    execute dc_com
    write dc_com
Sample Output 2:
    OK
    Access denied
"""
s = {'write': 'W', 'read': 'R','execute': 'X'}
dct = {}
for _ in range(int(input())):
    a, *b = input().split()
    dct[a] = b
for _ in range(int(input())):
    a, b = input().split()
    if s[a] in dct[b]:
        print('OK')
    else:
        print('Access denied')


""" Упражнение 7
Напишите программу для подсчета количества единиц каждого вида товара из приобретенных каждым покупателем 
интернет-магазина.
Формат входных данных
На вход программе подается число n — количество строк в базе данных о продажах интернет-магазина. Далее следует n 
строк с записями вида покупатель товар количество, где покупатель — имя покупателя (строка без пробелов), 
товар — название товара (строка без пробелов), количество — количество приобретенных единиц товара (натуральное число).
Формат выходных данных
Программа должна вывести список всех покупателей в лексикографическом порядке, после имени каждого 
покупателя — двоеточие, затем список названий всех приобретенных им товаров в лексикографическом порядке, после 
названия каждого товара — количество единиц товара. Информация о каждом товаре выводится на отдельной строке.
Примечание. Обратите внимание на второй тест. Если позиции товаров повторяются, то в итоговый список попадает суммарное 
количество товара по данной позиции.
Sample Input 1:
    5
    Руслан Пирог 1
    Тимур Карандаш 5
    Руслан Линейка 2
    Тимур Тетрадь 12
    Руслан Хлеб 3
Sample Output 1:
    Руслан:
    Линейка 2
    Пирог 1
    Хлеб 3
    Тимур:
    Карандаш 5
    Тетрадь 12
Sample Input 2:
    7
    Вячеслав Ручка 1
    Филипп Ручка 1
    Виктория Перо 3
    Вячеслав Линейка 4
    Виктория Тетрадь 7
    Вячеслав Ручка 29
    Филипп Циркуль 1
Sample Output 2:
    Виктория:
    Перо 3
    Тетрадь 7
    Вячеслав:
    Линейка 4
    Ручка 30
    Филипп:
    Ручка 1
    Циркуль 1
"""
dct = {}
for _ in range(int(input())):
    a, b, c = input().split()
    if a in dct:
        if b in dct[a]:
            dct[a][b] += int(c)
        else:
            dct[a][b] = int(c)
    else:
        dct[a] = {b: int(c)}
for n in sorted(dct):
    print(f'{n}:')
    for x in sorted(dct[n]):
        print(x, dct[n][x])

""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é concat(), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–±—ä–µ–¥–∏–Ω—è—é—â—É—é –∏—Ö –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑
—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (sep). –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –∑–∞–¥–∞–Ω, –∏–º —Å–ª—É–∂–∏—Ç –ø—Ä–æ–±–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è concat() –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
–∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è concat() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    print(concat('hello', 'python', 'and', 'stepik'))
    print(concat('hello', 'python', 'and', 'stepik', sep='*'))
    print(concat('hello', 'python', sep='()()()'))
    print(concat('hello', sep='()'))
    print(concat(1, 2, 3, 4, 5, 6, 7, 8, 9, sep='$$'))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
    hello python and stepik
    hello*python*and*stepik
    hello()()()python
    hello
    1$$2$$3$$4$$5$$6$$7$$8$$9
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é concat() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å.
"""
def concat(*args, sep=' '):
    return sep.join(map(str, args)) if len(args) > 1 else args[0]


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2
–ü–µ—Ä–µ–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é product_of_odds() –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ reduce().
def product_of_odds(data):   # data - —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
    result = 1
    for i in data:
        if i % 2 == 1:
            result *= i
    return result
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢–µ—Å—Ç–∏—Ä—É—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∏–∫–∞–∫ –Ω–µ "–ø–æ–∫–∞—Ä–∞–µ—Ç" –≤–∞—Å –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π filter() –∏ reduce(), 
–æ–¥–Ω–∞–∫–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Å—Ç–Ω–æ üòÉ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é product_of_odds() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ.
"""
from functools import reduce
from operator import mul
def product_of_odds(data):
    return reduce(mul, filter(lambda x: x % 2 == 1 ,data), 1)


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3
–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ words. –î–æ–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ (*), –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã 
—Å–ø–∏—Å–∫–∞ words, –∞ –∑–∞—Ç–µ–º –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é map() –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.
"""
words = 'the world is mine take a look what you have started'.split()
print(*map(lambda x: f'\"{x}\"', words))


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 4
–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª numbers. –î–æ–ø–∏—à–∏—Ç–µ –∫–æ–¥ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ (*), –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö 
—á–∏—Å–µ–ª-–ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –∏ –ø–µ—á–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é filter() –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.
"""
numbers = [18, 191, 9009, 5665, 78, 77, 45, 23, 19991, 908, 8976, 6565, 5665, 10, 1000, 908, 909, 232, 45654, 786]
print(*filter(lambda x: str(x) != str(x)[::-1], numbers))


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 5
–î–∞–Ω —Å–ø–∏—Å–æ–∫ numbers, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –∫–æ—Ä—Ç–µ–∂–µ–π. –î–æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ sorted_numbers –±—ã–ª 
—É–ø–æ—Ä—è–¥–æ—á–µ–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ç–µ–∂–µ–π —Å–ø–∏—Å–∫–∞ numbers.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –í—Å–ø–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ lambda.
"""
numbers = [(10, -2, 3, 4), (-13, 56), (1, 9, 2), (-1, -9, -45, 32), (-1, 5, 1), (17, 0, 1), (0, 1), (3,), (39, 12),
           (11, -23), (10, -100, 21, 32), (3, -8), (1, 1)]
sorted_numbers = sorted(numbers, reverse=True, key=lambda x: sum(x) / len(x))
print(sorted_numbers)


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 6
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é call(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–µ—ë –∏ –¥–µ–ª–∞–µ—Ç –≤—ã–∑–æ–≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, 
–≤–æ–∑–≤—Ä–∞—â–∞—è –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è call() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
def mul7(x):
    return x * 7
def add2(x, y):
    return x + y
def add3(x, y, z):
    return x + y + z
print(call(mul7, 10))
print(call(add2, 2, 7))
print(call(add3, 10, 30, 40))
print(call(bool, 0))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
    70
    9
    80
    False
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é call() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.
"""
def call(func, *args):
    return func(*args)


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 7
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é compose(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–µ –¥—Ä—É–≥–∏—Ö –æ–¥–Ω–æ–∞—Ä–≥—É–º–µ–Ω—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏ f –∏ g –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é 
—Ñ—É–Ω–∫—Ü–∏—é. –≠—Ç–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç x –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫ –Ω–µ–º—É –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω—É–∂–Ω–æ–º 
–ø–æ—Ä—è–¥–∫–µ: –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å, –∫–∞–∫ f(g(x)).
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è compose() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
def add3(x):
    return x + 3
def mul7(x):
    return x * 7
print(compose(mul7, add3)(1))
print(compose(add3, mul7)(2))
print(compose(mul7, str)(3))
print(compose(str, mul7)(5))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
    28
    17
    3333333
    35
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é compose() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è h(x) = f(g(x)), –ø—Ä–∏ —ç—Ç–æ–º –ø–æ—Ä—è–¥–æ–∫ 
–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π f –∏ g –≤–∞–∂–µ–Ω! 
"""
def compose(f, g):
    return lambda x: f(g(x))


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 8
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é arithmetic_operation(), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–∏–º–≤–æ–ª –æ–¥–Ω–æ–π –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (+, -, *, /) 
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ–¥, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è arithmetic_operation() –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    add = arithmetic_operation('+')
    div = arithmetic_operation('/')
    print(add(10, 20))
    print(div(20, 5))
–¥–æ–ª–∂–µ–Ω –≤—ã–≤–æ–¥–∏—Ç—å:
    30
    4.0
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é arithmetic_operation() –Ω–µ –Ω—É–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ–µ.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ú–æ–¥—É–ª—å operator –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –ø—Ä–∏ —Ä–µ—à–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ (—Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è —Ç—É—Ç). 
"""
from operator import *
def arithmetic_operation(operation):
    d = {'+': add, '-': sub, '*': mul, '/': truediv}
    return d[operation]


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 9
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ 
–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞, –∞ –∑–∞—Ç–µ–º –≤—ã–≤–µ–¥–µ—Ç –∏—Ö. –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –ø–µ—á–∞—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –≤ –∫–∞–∫–æ–º 
–ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –≤—Ö–æ–¥.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏ —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫—É —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –ø—Ä–µ–∂–Ω–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–µ—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ üòé.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è sorted() —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤—ã. 
–õ—é–±–∞—è –±—É–∫–≤–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–¥—É—â–µ–π —Ä–∞–Ω—å—à–µ, —á–µ–º –±—É–∫–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
Sample Input:
    cate Frog cat FROGs bee CATERS mouse cATwalk dolphin mOus Cats CatAlo
Sample Output:
    bee cat CatAlo cate CATERS Cats cATwalk dolphin Frog FROGs mOus mouse
"""
print(*sorted(input().split(), key=lambda x: x.lower()))


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 10
–ì–µ–º–∞—Ç—Ä–∏–µ–π —Å–ª–æ–≤–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ö–æ–¥—è—â–∏—Ö –≤ –Ω–µ–≥–æ –±—É–∫–≤.
–î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≥–µ–º–∞—Ç—Ä–∏–∏ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ:
–ø–µ—Ä–µ–≤–µ–¥—ë–º —Å–ª–æ–≤–æ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä;
—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–∫–≤—ã –≤—ã—á–∏—Å–ª–∏–º –∫–∞–∫ –∫–æ–¥(–±—É–∫–≤—ã) - –∫–æ–¥(–±—É–∫–≤—ã A).
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–∂–¥–æ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ) –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è 
–∏—Ö –≥–µ–º–∞—Ç—Ä–∏–∏. –ï—Å–ª–∏ –≥–µ–º–∞—Ç—Ä–∏—è —Å–ª–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –æ–Ω–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º (–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º) –ø–æ—Ä—è–¥–∫–µ.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn, –∞ –∑–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π ord().
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –°–ª–æ–≤–∞ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –ü—É—Å—Ç—å —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –≥–µ–º–∞—Ç—Ä–∏—é —Å–ª–æ–≤–∞ BaSis. –ü–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä BASIS. 
–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–ª–æ–≤–µ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ord():
    ord('B') = 66
    ord('A') = 65
    ord('S') = 83
    ord('I') = 73
    ord('S') = 83
–í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏ –≤—ã—á–∏—Å–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–∫–≤—ã –∫–∞–∫ –∫–æ–¥(–±—É–∫–≤—ã) - –∫–æ–¥(–±—É–∫–≤—ã A). –í—ã—á–∏—Ç–∞–µ–º –∏–∑ –∫–æ–¥–∞ 
–∫–∞–∂–¥–æ–π –±—É–∫–≤—ã –∑–Ω–∞—á–µ–Ω–∏–µ ord('A') = 65:
    ord('B') - ord('A') = 66 - 65 = 1
    ord('A') - ord('A') = 65 - 65 = 0
    ord('S') - ord('A') = 83 - 65 = 18
    ord('I') - ord('A') = 73 - 65 = 8
    ord('S') - ord('A') = 83 - 65 = 18
–ì–µ–º–∞—Ç—Ä–∏—è —Å–ª–æ–≤–∞ BaSis —Ä–∞–≤–Ω–∞ 1+0+18+8+18=45. 
Sample Input 1:
    4
    basis
    after
    chief
    agenda
Sample Output 1:
    agenda
    chief
    after
    basis
Sample Input 2:
    4
    Basis
    afTEr
    CHief
    agenda
Sample Output 2:
    CHief
    agenda
    Basis
    afTEr
"""
l = [input() for _ in range(int(input()))]
l.sort()
l.sort(key=lambda w: sum(map(lambda x: ord(x) - 65, w.upper())))
print(*l, sep='\n')


""" –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 11
IP-–∞–¥—Ä–µ—Å ‚Äì —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Å–µ—Ç–∏, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É TCP/IP.
–í 4-–π –≤–µ—Ä—Å–∏–∏ IP-–∞–¥—Ä–µ—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ê–¥—Ä–µ—Å –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ —á–µ—Ç—ã—Ä—ë—Ö –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª (–æ–∫—Ç–µ—Ç–æ–≤) 
—Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –æ—Ç 00 –¥–æ 255255, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.2
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç—ã–≤–∞–µ—Ç IP-–∞–¥—Ä–µ—Å–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º 
–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ n (n‚â•1) ‚Äì –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IP-–∞–¥—Ä–µ—Å–æ–≤. –ó–∞—Ç–µ–º nn —Å—Ç—Ä–æ–∫ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ IP-–∞–¥—Ä–µ—Å–∞–º–∏.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –ß—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ IP-–∞–¥—Ä–µ—Å 192.168.1.2 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É:
192*256^3 + 168*256^2 + 1*256^1 + 2*256^0 = 3232235778
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç key.
Sample Input:
    9
    128.199.44.24
    128.199.201.245
    143.198.168.95
    172.67.181.62
    172.67.222.111
    172.67.10.90
    45.8.106.59
    203.13.32.156
    172.67.181.194
Sample Output:
    45.8.106.59
    128.199.44.24
    128.199.201.245
    143.198.168.95
    172.67.10.90
    172.67.181.62
    172.67.181.194
    172.67.222.111
    203.13.32.156
"""
def ss(st):
    st = list(map(int, st.split('.')))
    return sum(map(lambda x, y: x*256**y, st, range(len(st)-1, -1, -1)))
l = [input() for _ in range(int(input()))]
l.sort(key=ss)
print(*l, sep='\n')

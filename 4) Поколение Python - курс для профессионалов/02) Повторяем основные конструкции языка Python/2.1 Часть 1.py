""" Упражнение 1
Реализуйте функцию hide_card(), которая принимает один аргумент:
card_number — строка, представляющая собой корректный номер банковской карты из 16 цифр, между которыми могут
присутствовать символы пробела
Функция должна заменять первые 12 цифр в строке card_number на символ * и возвращать полученный результат. Если между
цифрами в номере имелись символы пробела, их следует удалить.
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию hide_card(),
но не код, вызывающий ее.
Sample Input 1:
    card = '1234567890123456'
    print(hide_card(card))
Sample Output 1:
    ************3456
Sample Input 2:
    card = '3456 9012 5678 1234'
    print(hide_card(card))
Sample Output 2:
    ************1234
"""
def hide_card(st):
    st = st.replace(' ', '')
    return '*'*(len(st)-4) + st[-4:]


""" Упражнение 2
Реализуйте функцию same_parity(), которая принимает один аргумент:
numbers — список целых чисел
Функция должна возвращать новый список, элементами которого являются числа из списка numbers, имеющие ту же четность, 
что и первый элемент этого списка.
Примечание 1. Числа в возвращаемом функцией списке должны располагаться в своем исходном порядке. 
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию same_parity(), но не код, 
вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(same_parity([]))
Sample Output 1:
    []
Sample Input 2:
    print(same_parity([6, 0, 67, -7, 10, -20]))
Sample Output 2:
    [6, 0, 10, -20]
Sample Input 3:
    print(same_parity([-7, 0, 67, -9, 70, -29, 90]))
Sample Output 3:
    [-7, 67, -9, -29]
"""
def same_parity(lst):
    if lst:
        p = lst[0] % 2
        return list(filter(lambda x: x % 2 == p, lst))
    else:
        return lst


""" Упражнение 3
Будем считать, что PIN-код является корректным, если он удовлетворяет следующим условиям:
    состоит из 4, 5 или 6 символов
    состоит только из цифр (0-9)
    не содержит пробелов
Реализуйте функцию is_valid(), которая принимает один аргумент:
    string — произвольная строка
Функция должна возвращать значение True, если строка string представляет собой корректный PIN-код, 
или False в противном случае.
Примечание 1. Если в функцию передается пустая строка, функция должна возвращать значение False.
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию is_valid(), 
но не код, вызывающий ее.
Sample Input 1:
    print(is_valid('4367'))
Sample Output 1:
    True
Sample Input 2:
    print(is_valid('92134'))
Sample Output 2:
    True
Sample Input 3:
    print(is_valid('89abc1'))
Sample Output 3:
    False
"""
def is_valid(st):
    return len(st) in (4, 5, 6) and st.isdigit()


""" Упражнение 4
Реализуйте функцию print_given(), которая принимает произвольное количество позиционных и именованных аргументов и 
выводит все переданные аргументы, указывая тип каждого. Пары аргумент-тип должны выводиться каждая на отдельной строке, 
в следующем формате:
    для позиционных аргументов:
        <значение аргумента> <тип аргумента>
    для именованных аргументов:
        <имя переменной> <значение аргумента> <тип аргумента>
Примечание 1. При выводе позиционные аргументы должны быть расположены в порядке их передачи, именованные — 
в лексикографическом порядке имен переменных.
Примечание 2. При выводе сначала должны следовать все позиционные аргументы, затем — все именованные.
Примечание 3. Если в функцию ничего не передается, функция ничего не должна выводить.
Примечание 4. В тестирующую систему сдайте программу, содержащую только необходимую функцию print_given(), 
но не код, вызывающий ее.
Примечание 5. Тестовые данные доступны по ссылке.
Sample Input 1:
    print_given(1, [1, 2, 3], 'three', two=2)
Sample Output 1:
    1 <class 'int'>
    [1, 2, 3] <class 'list'>
    three <class 'str'>
    two 2 <class 'int'>
Sample Input 2:
    print_given('apple', 'cherry', 'watermelon')
Sample Output 2:
    apple <class 'str'>
    cherry <class 'str'>
    watermelon <class 'str'>
Sample Input 3:
    print_given(b=2, d=4, c=3, a=1)
Sample Output 3:
    a 1 <class 'int'>
    b 2 <class 'int'>
    c 3 <class 'int'>
    d 4 <class 'int'>
Sample Input 4:
    print_given()
Sample Output 4:
    
"""
def print_given(*args, **kwargs):
    if args:
        for i in args:
            print(i, type(i))
    if kwargs:
        for i in sorted(kwargs):
            print(i, kwargs[i], type(kwargs[i]))


""" Упражнение 5
Реализуйте функцию convert(), которая принимает один аргумент:
    string — произвольная строка
Функция должна возвращать строку string:
    полностью в нижнем регистре, если букв в нижнем регистре в этой строке больше
    полностью в верхнем регистре, если букв в верхнем регистре в этой строке больше
    полностью в нижнем регистре, если количество букв в верхнем и нижнем регистрах в этой строке совпадает
Примечание 1. Символы строки, не являющиеся буквами, следует игнорировать.
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию convert(), 
но не код, вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(convert('BEEgeek'))
Sample Output 1:
    beegeek
Sample Input 2:
    print(convert('pyTHON'))
Sample Output 2:
    PYTHON
Sample Input 3:
    print(convert('pi31415!'))
Sample Output 3:
    pi31415!
"""
def convert(st):
    lc = 0
    uc = 0
    for i in st:
        if i.islower():
            lc += 1
        elif i.isupper():
            uc += 1
    if lc >= uc:
        return st.lower()
    else:
        return st.upper()


""" Упражнение 6
Анаграммы — это слова, которые состоят из одинаковых букв. Например:
    адаптер — петарда
    адресочек — середочка
    азбука — базука
    аистенок — осетинка
Реализуйте функцию filter_anagrams(), которая принимает два аргумента в следующем порядке:
    word — слово в нижнем регистре
    words — список слов в нижнем регистре
Функция должна возвращать список, элементами которого являются слова из списка words, которые представляют анаграмму 
слова word. Если список words пуст или не содержит анаграмм, функция должна вернуть пустой список.
Примечание 1. Слова в возвращаемом функцией списке должны располагаться в своем исходном порядке. 
Примечание 2. Считайте, что слово является анаграммой самого себя.
Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию filter_anagrams(), 
но не код, вызывающий ее.
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    word = 'abba'
    anagrams = ['aabb', 'abcd', 'bbaa', 'dada']
    print(filter_anagrams(word, anagrams))
Sample Output 1:
    ['aabb', 'bbaa']
Sample Input 2:
    print(filter_anagrams('отсечка', ['сеточка', 'стоечка', 'тесачок', 'чесотка']))
Sample Output 2:
    ['сеточка', 'стоечка', 'тесачок', 'чесотка']
"""
def filter_anagrams(word, anagrams):
    word = sorted(word)
    return list(filter(lambda x: sorted(x) == word, anagrams))


""" Упражнение 7
В различных социальных сетях существуют системы лайков, которые в зависимости от количества людей, оценивших запись, 
показывают соответствующую информацию.
Реализуйте функцию likes(), которая принимает один аргумент:
names — список имён
Функция должна возвращать строку в соответствии с примерами ниже, содержание которой зависит от количества 
имён в списке names.
Приведенный ниже код:
    print(likes([]))
    print(likes(['Тимур']))
    print(likes(['Тимур', 'Артур']))
    print(likes(['Тимур', 'Артур', 'Руслан']))
    print(likes(['Тимур', 'Артур', 'Руслан', 'Анри']))
    print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима']))
    print(likes(['Тимур', 'Артур', 'Руслан', 'Анри', 'Дима', 'Рома', 'Гвидо', 'Марк']))
должен выводить:
    Никто не оценил данную запись
    Тимур оценил(а) данную запись
    Тимур и Артур оценили данную запись
    Тимур, Артур и Руслан оценили данную запись
    Тимур, Артур и 2 других оценили данную запись
    Тимур, Артур и 3 других оценили данную запись
    Тимур, Артур и 6 других оценили данную запись
Примечание 1. Имена в формируемой и возвращаемой функцией строке должны располагаться в своем исходном порядке.
Примечание 2. Обратите внимание, что если в передаваемом в функцию списке более трех имен, то явно указываются лишь 
первые два из них. 
Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию likes(), но не код, 
вызывающий ее.
"""
def likes(s):
    answers = ("'Никто не оценил'", "f'{s[0]} оценил(а)'", "f'{s[0]} и {s[1]} оценили'",
               "f'{s[0]}, {s[1]} и {s[2]} оценили'", "f'{s[0]}, {s[1]} и {len(s) - 2} других оценили'")
    return eval(answers[len(s) if len(s) < 4 else 4] + "' данную запись'")


""" Упражнение 8
Реализуйте функцию index_of_nearest(), которая принимает два аргумента в следующем порядке:
    numbers — список целых чисел
    number — целое число
Функция должна находить в списке numbers ближайшее по значению число к числу number и возвращать его индекс. 
Если список numbers пуст, функция должна вернуть число −1.
Примечание 1. Если в функцию передается список, содержащий несколько чисел, одновременно являющихся ближайшими к 
искомому числу, функция должна возвращать наименьший из индексов ближайших чисел.
Примечание 2. Рассмотрим третий тест. Ближайшими числами к числу 4 являются 5 и 3, имеющие индексы 1 и  соответственно. 
Наименьший из индексов равен 1.
Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию index_of_nearest(), 
но не код, вызывающий ее.
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(index_of_nearest([], 17))
Sample Output 1:
    -1
Sample Input 2:
    print(index_of_nearest([7, 13, 3, 5, 18], 0))
Sample Output 2:
    2
"""
def index_of_nearest(numbers, number):
    ind = -1
    x = sum(numbers)
    for i in range(len(numbers)):
        dif = abs(numbers[i] - number)
        if dif < x:
            ind = i
            x = dif
    return ind


""" Упражнение 9
Реализуйте функцию spell(), которая принимает произвольное количество позиционных аргументов-слов и возвращает словарь, 
ключи которого — первые буквы слов, а значения — максимальные длины слов на эту букву.
Примечание 1. Если в функцию не передается ни одного аргумента, функция должна возвращать пустой словарь.
Примечание 2. Функция должна игнорировать регистр слов, при этом в результирующий словарь должны попасть именно буквы 
в нижнем регистре.
Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию, но не код, вызывающий ее.
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    words = ['россия', 'Австрия', 'австралия', 'РумыниЯ', 'Украина', 'КИТай', 'УЗБЕКИСТАН']
    print(spell(*words))
Sample Output 1:
    {'р': 7, 'а': 9, 'у': 10, 'к': 5}
Sample Input 2:
    print(spell('Математика', 'История', 'химия', 'биология', 'Информатика'))
Sample Output 2:
    {'м': 10, 'и': 11, 'х': 5, 'б': 8}
Sample Input 3:
    words = ['fruit', 'football', 'February', 'forest', 'Family']
    print(spell(*words))
Sample Output 3:
    {'f': 8}
"""
def spell(*args):
    dct = {}
    for i in args:
        l = i.lower()[0]
        if l in dct:
            if len(i) > dct[l]:
                dct[l] = len(i)
        else:
            dct[l] = len(i)
    return dct


""" Упражнение 10
Реализуйте функцию choose_plural(), которая принимает два аргумента в следующем порядке:
    amount — натуральное число, количество
    declensions — кортеж из трех вариантов склонения существительного
Функция должна возвращать строку, полученную путем объединения подходящего существительного из кортежа declensions 
и количества amount, в следующем формате:
    <количество> <существительное>
Примечание 1. Передаваемый в функцию кортеж легко составить по мнемоническому правилу: один, два, пять. Например:
    для слова «арбуз»: арбуз, арбуза, арбузов
    для слова «рубль»: рубль, рубля, рублей
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию choose_plural(), но не код, 
вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(choose_plural(21, ('пример', 'примера', 'примеров')))
Sample Output 1:
    21 пример
Sample Input 2:
    print(choose_plural(92, ('гвоздь', 'гвоздя', 'гвоздей')))
Sample Output 2:
    92 гвоздя
Sample Input 3:
    print(choose_plural(8, ('яблоко', 'яблока', 'яблок')))
Sample Output 3:
    8 яблок
"""
def choose_plural(amount, declensions):
    st = str(amount)
    if len(st) > 1 and int(st[-2:]) in range(11, 20):
        return f'{amount} {declensions[2]}'
    elif st[-1] == '1':
        return f'{amount} {declensions[0]}'
    elif st[-1] in ('2', '3', '4'):
        return f'{amount} {declensions[1]}'
    else:
        return f'{amount} {declensions[2]}'


""" Упражнение 11
Реализуйте функцию get_biggest(), которая принимает один аргумент:
    numbers — список целых неотрицательных чисел
Функция должна возвращать наибольшее число, которое можно составить из чисел из списка numbers. Если список numbers 
пуст, функция должна вернуть число −1.
Примечание 1. Рассмотрим первый тест со списком чисел [1, 2, 3], из которых можно составить следующие числа:
123, 132, 213, 231, 312, 321
Наибольшим из представленных является 321321.
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию get_biggest(), но не код, 
вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(get_biggest([1, 2, 3]))
Sample Output 1:
    321
Sample Input 2:
    print(get_biggest([61, 228, 9, 3, 11]))
Sample Output 2:
    961322811
Sample Input 3:
    print(get_biggest([7, 71, 72]))
Sample Output 3:
    77271
Sample Input 4:
    print(get_biggest([]))
Sample Output 4:
    -1
"""
def get_biggest(numbers):
    if numbers:
        mx = len(str(max(numbers)))
        numbers.sort(reverse=True, key=lambda x: str(x)*mx)
        return int(''.join(map(str, numbers)))
    else:
        return -1

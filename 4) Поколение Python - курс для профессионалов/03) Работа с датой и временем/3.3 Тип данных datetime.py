""" Упражнение 1
Дополните приведенный ниже код, чтобы в переменной dt содержался объект типа datetime с датой и временем, которые
указаны в строке text.
Примечание. Дата, указанная в строке text, записана в формате DD.MM.YYYY, а время — в формате HH:MM.
"""
from datetime import datetime
text = 'Уважаемый пациент, доктор готов принять Вас 15.07.2022 в 08:30'
dt = datetime.strptime(text, 'Уважаемый пациент, доктор готов принять Вас %d.%m.%Y в %H:%M')
print(dt)


""" Упражнение 2
Дополните приведенный ниже код, чтобы он преобразовал секунды seconds (прошедшие от начала эпохи) в объект datetime и, 
наоборот, объект datetime в секунды (прошедшие от начала эпохи).
"""
from datetime import datetime
seconds = 2483228800
dt = datetime(2011, 11, 4)
print(datetime.fromtimestamp(seconds))
print(dt.timestamp())


""" Упражнение 3
Вам доступен список times_of_purchases, содержащий даты (тип datetime), в которые были совершены покупки в некотором 
интернет-магазине. Дополните приведенный ниже код, чтобы он вывел текст До полудня, если большее число покупок было 
совершено до полудня, или текст После полудня в противном случае.
Примечание 1. Гарантируется, что ни одна покупка не была совершена ровно в 12:00:00.
Примечание 2. Гарантируется, что до полудня и после полудня совершено различное количество покупок.
"""
from datetime import datetime
times_of_purchases = [datetime(2017, 10, 1, 12, 23, 25), datetime(2017, 10, 1, 15, 26, 26),
                      datetime(2017, 10, 1, 15, 42, 57), datetime(2017, 10, 1, 17, 49, 59),
                      datetime(2017, 10, 2, 6, 37, 10), datetime(2017, 10, 2, 6, 42, 53),
                      datetime(2017, 10, 2, 8, 56, 45), datetime(2017, 10, 2, 9, 18, 3),
                      datetime(2017, 10, 2, 12, 23, 48), datetime(2017, 10, 2, 12, 45, 5),
                      datetime(2017, 10, 2, 12, 48, 8), datetime(2017, 10, 2, 12, 10, 54),
                      datetime(2017, 10, 2, 19, 18, 10), datetime(2017, 10, 2, 12, 31, 45),
                      datetime(2017, 10, 3, 20, 57, 10), datetime(2017, 10, 4, 7, 4, 57),
                      datetime(2017, 10, 4, 7, 13, 31), datetime(2017, 10, 4, 7, 13, 42),
                      datetime(2017, 10, 4, 7, 21, 54), datetime(2017, 10, 4, 14, 22, 12),
                      datetime(2017, 10, 4, 14, 50), datetime(2017, 10, 4, 15, 7, 27),
                      datetime(2017, 10, 4, 12, 44, 49), datetime(2017, 10, 4, 12, 46, 41),
                      datetime(2017, 10, 4, 16, 32, 33), datetime(2017, 10, 4, 16, 34, 44),
                      datetime(2017, 10, 4, 16, 46, 59), datetime(2017, 10, 4, 12, 26, 6)]
print('До полудня' if len(list(filter(lambda x: x.hour < 12, times_of_purchases))) > len(times_of_purchases) else 'После полудня')


""" Упражнение 4
Вам доступны список dates, содержащий даты, и список times, содержащий времена. Количество элементов в этих списках 
одинаковое. Дополните приведенный ниже код, чтобы он вывел datetime объекты, полученные путем объединения элементов 
списков dates и times, находящихся на одинаковых позициях. Полученные объекты должны быть расположены в порядке 
возрастания секунд, каждый на отдельной строке.
Примечание 1. Например, если бы списки dates и times имели вид:
    dates = [date(2020, 11, 12), date(2021, 7, 2), date(2020, 9, 25)]
    times = [time(12, 50, 22), time(12, 19, 1), time(7, 30, 1)]
то программа должна была бы вывести:
    2021-07-02 12:19:01
    2020-09-25 07:30:01
    2020-11-12 12:50:22
Примечание 2. Если объекты имеют равное количество секунд, то следует сохранить их исходный порядок.
"""
from datetime import date, time, datetime
dates = [date(1793, 8, 23), date(1410, 3, 11), date(804, 11, 12), date(632, 6, 4),
         date(295, 1, 23), date(327, 8, 24), date(167, 4, 16), date(229, 1, 24),
         date(1239, 2, 5), date(1957, 7, 14), date(197, 8, 24), date(479, 9, 6)]
times = [time(7, 33, 27), time(21, 2, 10), time(17, 20, 47), time(20, 8, 59),
         time(12, 42, 56), time(15, 9, 57), time(17, 47, 9), time(9, 40, 2),
         time(11, 47, 1), time(17, 27, 10), time(17, 55, 40), time(9, 14, 9)]
lst = [datetime.combine(dates[x], times[x]) for x in range(len(dates))]
for name in sorted(lst, key=lambda x: x.second):
    print(name)


""" Упражнение 5
Ученики онлайн-школы BEEGEEK решили выяснить, кто из них быстрее всех решит домашнее задание по математике. Для этого 
каждый ученик зафиксировал время начала и окончания решения своей домашней работы.
Вам доступен словарь data, содержащий результаты учеников. Ключом в словаре является имя ученика, а значением — кортеж, 
первый элемент которого — время начала решения, второй элемент — время окончания решения. Дополните приведенный ниже 
код, чтобы он вывел имя ученика, который затратил на решение домашнего задания меньше всего времени.
Примечание 1. Гарантируется, что искомый ученик единственный.
Примечание 2. Дата-времена в кортежах представлены в виде строк в формате DD.MM.YYYY HH:MM:SS.
"""
from datetime import datetime
from operator import sub
data = {'Дима': ('03.11.2021 09:31:18', '03.11.2021 11:41:28'),
        'Геор': ('01.11.2021 09:03:04', '01.11.2021 12:40:35'),
        'Анна': ('02.11.2021 04:41:54', '02.11.2021 05:39:40'),
        'Илина': ('02.11.2021 01:36:40', '02.11.2021 04:48:27'),
        'Герман': ('04.11.2021 07:51:19', '04.11.2021 09:53:53'),
        'Руслан': ('01.11.2021 11:26:06', '01.11.2021 12:56:24'),
        'Лера': ('03.11.2021 11:09:41', '03.11.2021 14:37:41'),
        'Егор': ('03.11.2021 05:29:38', '03.11.2021 06:01:59'),
        'Максим': ('05.11.2021 13:05:03', '05.11.2021 14:27:41'),
        'Саша': ('03.11.2021 04:14:26', '03.11.2021 05:10:58'),
        'Марина': ('05.11.2021 15:21:06', '05.11.2021 18:33:46')}
print(max(data, key=lambda x: sub(*map(lambda y: datetime.strptime(y, '%d.%m.%Y %H:%M:%S'), data[x]))))


""" Упражнение 6
Вам доступен текстовый файл diary.txt, в который космонавт записывал небольшие отчёты за день. Каждый новый отчёт 
он мог записать либо в начало файла, либо в середину, либо в конец. Все отчеты разделены между собой пустой строкой. 
Каждый новый отчёт начинается со строки с датой и временем в формате DD.MM.YYYY; HH:MM, после которой следуют события, 
произошедшие за указанный день:
29.04.2006; 06:55
    It wasn’t until several hours after launch that we were able to take the time to get out of our seats and enter the 
    “habitation module.”
    Then, after another orbital maneuver, we finally were able to take a several hour break and get a little sleep.
03.05.2006; 20:24
    Everybody had a sleeping bag although I only used mine on a couple of brief occasions, and then only when getting a 
    little chilly.
...
Напишите программу, которая расставляет все записи космонавта в хронологическом порядке и выводит полученный результат.
Примечание 1. Например, если бы файл diary.txt имел вид:
13.02.1994; 18:49
    Уже несколько дней наблюдаем на теневой части орбиты в районе Канады мощнейшее полярное сияние.
    Прежде всего, поражают масштабы происходящего. Под нами огромная зелено-розовая «змея».
03.02.1994; 20:18
    Сегодня наблюдали и сняли на видео след Шаттла после выведения, дымит он прилично.
    Готовимся к радиолюбительской связи с экипажем Шаттла и, конечно, с Сергеем.
    При подготовке к сеансу связи с Шаттлом познакомился с Ритой, радиолюбителем из Австралии.
    Она немного говорит по-русски и очень приятно слышать родную речь.
12.02.1994; 17:17
    Сегодня возникли проблемы со сбросом через спутник ретранслятор видеоинформации по снятому нами следу Шаттла.
    Как сообщил нам ЦУП, в Щелкове холодно, все замерзло, антенна не работает...
    Все это наводит на грустные размышления о нашей безолаберности и разрухе.
    то программа должна была бы вывести:
03.02.1994; 20:18
    Сегодня наблюдали и сняли на видео след Шаттла после выведения, дымит он прилично.
    Готовимся к радиолюбительской связи с экипажем Шаттла и, конечно, с Сергеем.
    При подготовке к сеансу связи с Шаттлом познакомился с Ритой, радиолюбителем из Австралии.
    Она немного говорит по-русски и очень приятно слышать родную речь.
12.02.1994; 17:17
    Сегодня возникли проблемы со сбросом через спутник ретранслятор видеоинформации по снятому нами следу Шаттла.
    Как сообщил нам ЦУП, в Щелкове холодно, все замерзло, антенна не работает...
    Все это наводит на грустные размышления о нашей безолаберности и разрухе.
13.02.1994; 18:49
    Уже несколько дней наблюдаем на теневой части орбиты в районе Канады мощнейшее полярное сияние.
    Прежде всего, поражают масштабы происходящего. Под нами огромная зелено-розовая «змея».
Примечание 2. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 3. При открытии файла используйте явное указание кодировки UTF-8.
"""
from datetime import datetime
with open (r'C:\Users\DF17\Downloads\diary.txt', encoding='UTF-8') as file:
    lst = file.read().split('\n\n')
lst.sort(key=lambda x: datetime.strptime(x[:17], '%d.%m.%Y; %H:%M'))
print(*lst, sep='\n\n', end='')


""" Упражнение 7
Во время визита очередного гостя сотрудникам отеля приходится проверять, доступна ли та или иная дата для бронирования 
номера.
Реализуйте функцию is_available_date(), которая принимает два аргумента в следующем порядке:
    booked_dates — список строковых дат, недоступных для бронирования. Элементом списка является либо одиночная дата, 
    либо период (две даты через дефис). Например: ['04.11.2021', '05.11.2021-09.11.2021']
    date_for_booking — одиночная строковая дата или период (две даты через дефис), на которую гость желает забронировать 
    номер. Например: '01.11.2021' или '01.11.2021-04.11.2021'
Функция is_available_date() должна возвращать True, если дата или период date_for_booking полностью доступна для 
бронирования. В противном случае функция должна возвращать False.
Примечание 1. Гарантируется, что в периоде левая дата всегда меньше правой.
Примечание 2. В периоде (две даты через дефис) граничные даты включены.
Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию is_available_date(), 
но не код, вызывающий ее.
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    dates = ['04.11.2021', '05.11.2021-09.11.2021']
    some_date = '01.11.2021'
    print(is_available_date(dates, some_date))
Sample Output 1:
    True
Sample Input 2:
    dates = ['04.11.2021', '05.11.2021-09.11.2021']
    some_date = '01.11.2021-04.11.2021'
    print(is_available_date(dates, some_date))
Sample Output 2:
    False
Sample Input 3:
    dates = ['04.11.2021', '05.11.2021-09.11.2021']
    some_date = '06.11.2021'
    print(is_available_date(dates, some_date))
Sample Output 3:
    False
"""
from datetime import datetime
def tf(st):
    if type(st) == str:
        if len(st) == 10:
            return [datetime.strptime(st, '%d.%m.%Y').timestamp()]
        else:
            st = st.split('-')
            x = int(datetime.strptime(st[0], '%d.%m.%Y').timestamp())
            y = int(datetime.strptime(st[1], '%d.%m.%Y').timestamp())
            return [x for x in range(x, y + 1, 3600)]
    else:
        return [y for x in st for y in tf(x)]


def is_available_date(booked_dates, date_for_booking):
    b_d = tf(booked_dates)
    dfb = tf(date_for_booking)
    for i in dfb:
        if i in b_d:
            return False
    return True
    # Решение через множества в конечной функции
    b_d = set(tf(booked_dates))
    dfb = set(tf(date_for_booking))
    return not bool(b_d & dfb)

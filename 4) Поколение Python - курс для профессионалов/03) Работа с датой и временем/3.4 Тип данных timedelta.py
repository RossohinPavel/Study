""" Упражнение 1
Дополните приведенный ниже код, чтобы он прибавил к объекту datetime(2021, 11, 4, 13, 6) одну неделю и 12 часов
и вывел результат в формате DD.MM.YYYY HH:MM:SS.
"""
from datetime import datetime, timedelta
dt = datetime(2021, 11, 4, 13, 6) + timedelta(weeks=1, hours=12)
print(dt.strftime('%d.%m.%Y %H:%M:%S'))


""" Упражнение 2
Дополните приведенный ниже код, чтобы он вывел количество дней (целое число) между датами today и birthday.
"""
from datetime import date
today = date(2021, 11, 4)
birthday = date(2022, 10, 6)
days = birthday - today
print(days.days)


""" Упражнение 3
Напишите программу, которая принимает на вход дату и выводит предыдущую и следующую даты.
Формат входных данных
На вход программе подается дата в формате DD.MM.YYYY.
Формат выходных данных
Программа должна вывести предыдущую и следующую даты относительно введенной даты, каждую на отдельной строке, 
в формате DD.MM.YYYY.
Примечание 1. Гарантируется, что у подаваемой даты есть предыдущая и следующая даты.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    04.11.2021
Sample Output 1:
    03.11.2021
    05.11.2021
Sample Input 2:
    30.11.2021
Sample Output 2:
    29.11.2021
    01.12.2021
Sample Input 3:
    01.11.2021
Sample Output 3:
    31.10.2021
    02.11.2021
"""
from datetime import datetime, timedelta
dat = datetime.strptime(input(), '%d.%m.%Y')
dat1 = dat-timedelta(days=1)
dat2 = dat+timedelta(days=1)
print(dat1.strftime('%d.%m.%Y'), dat2.strftime('%d.%m.%Y'), sep='\n')


""" Упражнение 4
Напишите программу, которая принимает на вход время и выводит целое количество секунд, прошедшее с начала суток.
Формат входных данных
На вход программе подается время в формате HH:MM:SS.
Формат выходных данных
Программа должна вывести целое количество секунд, прошедшее с начала суток.
Примечание 1. Началом суток считается момент времени, соответствующий 00:00:00.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    00:01:01
Sample Output 1:
    61
Sample Input 2:
    00:00:00
Sample Output 2:
    0
Sample Input 3:
    12:12:12
Sample Output 3:
    43932
"""
from datetime import timedelta
lst = list(map(int, input().split(':')))
print(timedelta(hours=lst[0], minutes=lst[1], seconds=lst[2]).seconds)


""" Упражнение 5
Часы показывают время в формате HH:MM:SS. На этих часах запустили таймер, который прозвенит через nn секунд. Напишите 
программу, которое определит, какое время будет на часах, когда прозвенит таймер.
Формат входных данных
На вход программе в первой строке подается текущее время на часах в формате HH:MM:SS. В следующей строке вводится целое 
неотрицательное число n — количество секунд, через которое должен прозвенеть таймер.
Формат выходных данных
Программа должна вывести время в формате HH:MM:SS, которое будет на часах, когда прозвенит таймер.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    09:00:00
    90
Sample Output 1:
    09:01:30
Sample Input 2:
    23:59:59
    1
Sample Output 2:
    00:00:00
Sample Input 3:
    13:34:46
    456
Sample Output 3:
    13:42:22
"""
from datetime import datetime, timedelta
current = datetime.strptime(input(), '%H:%M:%S')
alarm = current + timedelta(seconds=int(input()))
print(alarm.strftime('%H:%M:%S'))


""" Упражнение 6
Реализуйте функцию num_of_sundays(), которая принимает на вход один аргумент:
year — натуральное число, год
Функция должна возвращать количество воскресений в году year.
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию num_of_sundays(), 
но не код, вызывающий ее.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(num_of_sundays(2021))
Sample Output 1:
    52
Sample Input 2:
    year = 2000
    print(num_of_sundays(year))
Sample Output 2:
    53
Sample Input 3:
    print(num_of_sundays(768))
Sample Output 3:
    52
"""
from datetime import date
def num_of_sundays(year):
    dat = date(year, 1, 1).toordinal()
    c = 0
    while dat != date(year+1, 1, 1).toordinal():
        if date.fromordinal(dat).weekday() == 6:
            c += 1
        dat += 1
    return c


""" Упражнение 7
Артуру нужно подготовить 1010 задач для нового курса "ООП на Python". Чтобы занятие не оказалось утомительным, 
он придумал правило:
    если сегодня он подготовил первую задачу, то вторую он должен подготовить через один день
    если сегодня он подготовил вторую задачу, то третью он должен подготовить через два дня
    если сегодня он подготовил третью задачу, то четвертую он должен подготовить через три дня
и так далее
Напишите программу, которая определяет даты, в которые Артуру нужно подготовить задачи.
Формат входных данных
На вход программе подается дата подготовки первой задачи в формате DD.MM.YYYY.
Формат выходных данных
Программа должна вывести 10 дат, удовлетворяющих условию задачи, каждую на отдельной строке, в формате DD.MM.YYYY.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    20.12.2021
Sample Output 1:
    20.12.2021
    22.12.2021
    25.12.2021
    29.12.2021
    03.01.2022
    09.01.2022
    16.01.2022
    24.01.2022
    02.02.2022
    12.02.2022
Sample Input 2:
    05.11.2021
Sample Output 2:
    05.11.2021
    07.11.2021
    10.11.2021
    14.11.2021
    19.11.2021
    25.11.2021
    02.12.2021
    10.12.2021
    19.12.2021
    29.12.2021
"""
from datetime import datetime, timedelta
pattern = '%d.%m.%Y'
date1 = datetime.strptime(input(), pattern)
print(date1.strftime(pattern))
for i in range(2, 11):
    date1 = date1 + timedelta(i)
    print(date1.strftime(pattern))


""" Упражнение 8
Дана последовательность дат. Напишите программу, которая создает и выводит список, элементами которого являются 
неотрицательные целые числа — количество дней между двумя соседними датами последовательности.
Формат входных данных
На вход программе подается последовательность дат, разделенных пробелом, в формате DD.MM.YYYY.
Формат выходных данных
Программа должна вывести список, содержащий неотрицательные целые числа, каждое из которых — количество дней между 
двумя соседними датами последовательности.
Примечание 1. Даты в последовательности могут располагаться в произвольном порядке, то есть не гарантируется, 
что следующая дата больше предыдущей.
Примечание 2. Если последовательность состоит из одной даты, то программа должна вывести пустой список.
Примечание 3. Рассмотрим второй тест, в котором подается последовательность из пяти дат. 
Определим элементы результирующего списка:
    первый элемент — 1, количество дней между датами 06.10.2021 и 05.10.2021
    второй элемент — 3, количество дней между датами 05.10.2021 и 08.10.2021
    третий элемент — 1, количество дней между датами 08.10.2021 и 09.10.2021
    четвертый элемент — 2, количество дней между датами 09.10.2021 и 07.10.2021
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    05.10.2021 06.10.2021 07.10.2021 08.10.2021 09.10.2021
Sample Output 1:
    [1, 1, 1, 1]
Sample Input 2:
    06.10.2021 05.10.2021 08.10.2021 09.10.2021 07.10.2021
Sample Output 2:
    [1, 3, 1, 2]
Sample Input 3:
    05.10.2021
Sample Output 3:
    []
"""
from datetime import datetime
date_list = input().split()
lst = []
if len(date_list) > 1:
    pattern = '%d.%m.%Y'
    for i in range(len(date_list)-1):
        date1 = datetime.strptime(date_list[i], pattern).toordinal()
        date2 = datetime.strptime(date_list[i+1], pattern).toordinal()
        lst.append(abs(date1 - date2))
print(lst)


""" Упражнение 9
Реализуйте функцию fill_up_missing_dates(), которая принимает на вход один аргумент:
dates — список строковых дат в формате DD.MM.YYYY
Функция должна возвращать список, в котором содержатся все даты из списка dates, расположенные в порядке возрастания, 
а также все недостающие промежуточные даты.
Примечание 1. Рассмотрим первый тест. Список dates содержит период с 01.11.2021 по 07.11.2021:
    dates = ['01.11.2021', '07.11.2021', '04.11.2021', '03.11.2021']
в котором отсутствуют даты 02.11.2021, 05.11.2021, 06.11.2021. Тогда вызов функции: fill_up_missing_dates(dates)
должен вернуть список: 
    ['01.11.2021', '02.11.2021', '03.11.2021', '04.11.2021', '05.11.2021', '06.11.2021', '07.11.2021']
Примечание 2. Функция должна создавать и возвращать новый список, а не изменять переданный.
Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию fill_up_missing_dates(), 
но не код, вызывающий ее.
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    dates = ['01.11.2021', '07.11.2021', '04.11.2021', '03.11.2021']
    print(fill_up_missing_dates(dates))
Sample Output 1:
    ['01.11.2021', '02.11.2021', '03.11.2021', '04.11.2021', '05.11.2021', '06.11.2021', '07.11.2021']
Sample Input 2:
    dates = ['01.11.2021', '04.11.2021', '09.11.2021', '15.11.2021']
    print(fill_up_missing_dates(dates))
Sample Output 2:
    ['01.11.2021', '02.11.2021', '03.11.2021', '04.11.2021', '05.11.2021', '06.11.2021', '07.11.2021', '08.11.2021', 
    '09.11.2021', '10.11.2021', '11.11.2021', '12.11.2021', '13.11.2021', '14.11.2021', '15.11.2021']
"""
from datetime import datetime
def fill_up_missing_dates(dates):
    pattern = '%d.%m.%Y'
    dates = [datetime.strptime(x, pattern).toordinal() for x in dates]
    return [datetime.fromordinal(x).strftime(pattern) for x in range(min(dates), max(dates)+1)]


""" Упражнение 10
Репетитор по математике проводит занятия по 4545 минут с перерывами по 1010 минут. Репетитор обозначает время начала 
рабочего дня и время окончания рабочего дня. Напишите программу, которая генерирует и выводит расписание занятий.
Формат входных данных
На вход программе в первой строке подается время начала рабочего дня в формате HH:MM. В следующей строке вводится время 
окончания рабочего дня в том же формате.
Формат выходных данных
Программа должна сгенерировать и вывести расписание занятий. На первой строке выводится время начала и окончания 
первого занятия в формате HH:MM - HH:MM, на второй строке — время начала и окончания второго занятия в том же формате, 
и так далее.
Примечание 1. Если занятие обрывается временем окончания работы, то добавлять его в расписание не нужно.
Примечание 2. Если разница между временем начала и окончания рабочего дня меньше 45 минут, программа ничего не должна 
выводить.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    10:00
    12:35
Sample Output 1:
    10:00 - 10:45
    10:55 - 11:40
    11:50 - 12:35
Sample Input 2:
    09:00
    11:00
Sample Output 2:
    09:00 - 09:45
    09:55 - 10:40
Sample Input 3:
    11:00
    11:30
Sample Output 3:
    
"""
from datetime import datetime, timedelta
pat = '%H:%M'
start, end = map(lambda x: datetime.strptime(input(), pat), range(2))
lst = []
while True:
    ls = start
    le = start + timedelta(minutes=45)
    if le <= end:
        lst.extend([ls, le])
    else:
        break
    start = start + timedelta(minutes=55)
for i in range(0, len(lst), 2):
    print(f'{lst[i].strftime(pat)} - {lst[i+1].strftime(pat)}')

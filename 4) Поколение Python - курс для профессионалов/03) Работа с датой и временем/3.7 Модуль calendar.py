""" Упражнение 1
Напишите программу, которая определяет, является ли год високосным.
Формат входных данных
На вход программе в первой строке подается целое число n, в последующих n строках вводятся натуральные числа,
представляющие года.
Формат выходных данных
Программа должна для каждого введенного года вывести True, если он является високосным, или False в противном случае.
Sample Input 1:
    1
    2021
Sample Output 1:
    False
Sample Input 2:
    4
    1999
    2000
    2001
    2002
Sample Output 2:
    False
    True
    False
    False
Sample Input 3:
    3
    4433
    2048
    9757
Sample Output 3:
    False
    True
    False
"""
import calendar
for _ in range(int(input())):
    print(calendar.isleap(int(input())))


""" Упражнение 2
Напишите программу, которая выводит календарь на заданные год и месяц.
Формат входных данных
На вход программе подаются год и сокращенное название месяца на английском, разделенные пробелом.
Формат выходных данных
Программа должна вывести календарь на введенные год и месяц.
Sample Input:
    2021 Dec
Sample Output:
       December 2021
    Mo Tu We Th Fr Sa Su
           1  2  3  4  5
     6  7  8  9 10 11 12
    13 14 15 16 17 18 19
    20 21 22 23 24 25 26
    27 28 29 30 31
"""
import calendar
a = input().split()
print(calendar.month(int(a[0]), int(list(calendar.month_abbr).index(a[1]))))


""" Упражнение 3
Напишите программу, которая определяет день недели, соответствующий заданной дате.
Формат входных данных
На вход программе подается дата в формате YYYY-MM-DD.
Формат выходных данных
Программа должна вывести полное название дня недели на английском, который соответствует введенной дате.
Sample Input 1:
    2021-12-10
Sample Output 1:
    Friday
Sample Input 2:
    2022-01-03
Sample Output 2:
    Monday
Sample Input 3:
    2021-11-02
Sample Output 3:
    Tuesday
"""
import calendar
day = calendar.weekday(*map(int, input().split('-')))
print(calendar.day_name[day])


""" Упражнение 4
Напишите программу, которая определяет количество дней в заданном месяце.
Формат входных данных
На вход программе подаются год и порядковый номер месяца (начиная с 1), разделенные пробелом.
Формат выходных данных
Программа должна вывести единственное число — количество дней в введенном месяце.
Примечание 1. Январь имеет порядковый номер 1, Февраль — 2, Март — 3, и так далее.
Sample Input 1:
    2008 1
Sample Output 1:
    31
Sample Input 2:
    1977 2
Sample Output 2:
    28
Sample Input 3:
    2000 3
Sample Output 3:
    31
"""
import calendar
print(calendar.monthrange(*map(int, input().split()))[1])


""" Упражнение 5
Напишите программу, которая определяет количество дней в заданном месяце.
Формат входных данных
На вход программе подаются год и полное название месяца на английском, разделенные пробелом.
Формат выходных данных
Программа должна вывести единственное число — количество дней в введенном месяце.
Sample Input 1:
    1983 January
Sample Output 1:
    31
Sample Input 2:
    1956 February
Sample Output 2:
    29
Sample Input 3:
    1959 March
Sample Output 3:
    31
"""
import calendar
mp = input().split()
mp[0] = int(mp[0])
mp[1] = list(calendar.month_name).index(mp[1])
print(calendar.monthrange(*mp)[1])


""" Упражнение 6
Реализуйте функцию get_days_in_month(), которая принимает два аргумента в следующем порядке:
    year — натуральное число
    month — полное название месяца на английском
Функция должна возвращать отсортированный по возрастанию список всех дат (тип date) месяца month и года year.
Примечание 1. Например, вызов:
    get_days_in_month(2021, 'December')
должен вернуть список:
[datetime.date(2021, 12, 1), datetime.date(2021, 12, 2), ..., datetime.date(2021, 12, 30), datetime.date(2021, 12, 31)]
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию get_days_in_month(), 
но не код, вызывающий ее.
"""
import calendar
import datetime
def get_days_in_month(year, month):
    month_number = list(calendar.month_name).index(month)
    rng = calendar.monthrange(year, month_number)[1]
    return [datetime.date(year, month_number, x) for x in range(1, rng+1)]


""" Упражнение 7
Реализуйте функцию get_all_mondays(), которая принимает один аргумент:
    year — натуральное число
Функция должна возвращать отсортированный по возрастанию список всех дат (date) года year, выпадающих на понедельник.
Примечание 1. Например, вызов:
    get_all_mondays(2021)
должен вернуть список:
[datetime.date(2021, 1, 4), datetime.date(2021, 1, 11), ..., datetime.date(2021, 12, 20), datetime.date(2021, 12, 27)]
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию get_all_mondays(),
но не код, вызывающий ее.
"""
import datetime
def get_all_mondays(year):
    dt = datetime.date(year, 1, 1).toordinal()
    lst = []
    for x in range(366):
        d_t = datetime.date.fromordinal(dt+x)
        if d_t.weekday() == 0 and d_t.year == year:
            lst.append(d_t)
    return lst


""" Упражнение 8
Во многих музеях существует один день месяца, когда посещение музея для всех лиц или отдельных категорий граждан 
происходит без взимания платы. Например, в Эрмитаже это третий четверг месяца.
Напишите программу, которая определяет даты бесплатных дней посещения Эрмитажа в заданном году.
Формат входных данных
На вход программе подается натуральное число, представляющее год.
Формат выходных данных
Программа должна определить все даты бесплатных дней посещения Эрмитажа в введенном году и вывести их. 
Даты должны быть расположены в порядке возрастания, каждая на отдельной строке, в формате DD.MM.YYYY.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    2021
Sample Output 1:
    21.01.2021
    18.02.2021
    18.03.2021
    15.04.2021
    20.05.2021
    17.06.2021
    15.07.2021
    19.08.2021
    16.09.2021
    21.10.2021
    18.11.2021
    16.12.2021
"""
import calendar
year = int(input())
for x in range(1, 13):
    m = calendar.monthcalendar(year, x)
    if m[0][3] == 0:
        print(f'{m[3][3]}.{str(x).rjust(2, "0")}.{year}')
    else:
        print(f'{m[2][3]}.{str(x).rjust(2, "0")}.{year}')

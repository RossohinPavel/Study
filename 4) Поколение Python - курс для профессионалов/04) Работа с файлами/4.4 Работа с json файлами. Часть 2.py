""" Упражнение 1
Дополните приведенный ниже код, чтобы он вывел содержимое словаря countries, расположив его элементы в
лексикографическом порядке ключей, указав в качестве разделителя пар ключ-значение строку   -  (пробел дефис пробел),
а в качестве отступов — три пробела.
Примечание 1. Начальная часть ответа выглядит так:
    {
       "Angola" - "Luanda",
       "Australia" - "Canberra",
       ...
Примечание 2. Используйте необязательные аргументы indent, separators и sort_keys.
"""
import json
countries = {'Monaco': 'Monaco', 'Iceland': 'Reykjavik', 'Kenya': 'Nairobi', 'Kazakhstan': 'Nur-Sultan',
             'Mali': 'Bamako', 'Colombia': 'Bogota', 'Finland': 'Helsinki', 'Costa Rica': 'San Jose',
             'Cuba': 'Havana', 'France': 'Paris', 'Gabon': 'Libreville', 'Liberia': 'Monrovia',
             'Angola': 'Luanda', 'India': 'New Delhi', 'Canada': 'Ottawa', 'Australia': 'Canberra'}
formated = json.dumps(countries, sort_keys=True, indent=3, separators=(',', ' - '))
print(formated)


""" Упражнение 2
Дополните приведенный ниже код, чтобы он преобразовал словарь words в строку в формате JSON, пропуская пары, которые 
имеют недопустимые ключи, и присвоил полученный результат переменной data_json.
Примечание. Используйте необязательный аргумент skipkeys.
"""
import json
words = {
         frozenset(["tap", "telephone"]): ("tæp", "telifəun"),
         "travel": "trævl",
         ("hello", "world"): ("həˈləʊ", "wɜːld"),
         "moonlight": "muːn.laɪt",
         "sunshine": "ˈsʌn.ʃaɪn",
         ("why", "is", "so", "difficult"): ("waɪ", "ɪz", "səʊ", "ˈdɪfɪkəlt"),
         "adventure": "ədˈventʃər",
         "beautiful": "ˈbjuːtɪfl",
         frozenset(["spoon", "block"]): ("spu:n", "blɔk"),
         "bicycle": "baisikl",
         ("pilot", "fly"): ("pailət", "flai")
        }
data_json = json.dumps(words, skipkeys=True)


""" Упражнение 3
Вам доступны словари club1, club2 и club3, содержащие данные о различных футбольных клубах. Дополните приведенный ниже 
код, чтобы он объединил данные словари в список и записал полученную структуру данных в файл data.json, указав в 
качестве отступов три символа пробела.
Примечание 1. Словари в списке должны располагаться в своем исходном порядке.
Примечание 2. Начальная часть файла data.json выглядит так:
[
   {
      "name": "FC Byern Munchen",
      "country": "Germany",
      ...
   },
   ...
]
Примечание 3. Используйте необязательный аргумент indent. 
"""
import json
club1 = {"name": "FC Byern Munchen", "country": "Germany", "founded": 1900,
         "trainer": "Julian Nagelsmann", "gaolkeeper": "M. Neuer", "league_position": 1}

club2 = {"name": "FC Barcelona", "country": "Spain", "founded": 1899,
         "trainer": "Xavier Creus", "gaolkeeper": "M. Ter Stegen", "league_position": 7}

club3 = {"name": "FC Manchester United", "country": "England", "founded": 1878,
         "trainer": "Michael Carrick", "gaolkeeper": "D. De Gea", "league_position": 8}
with open('data.json', 'w') as file:
    json.dump([club1, club2, club3], file, indent=3)


""" Упражнение 4
Ниже представлена программа, которая должна преобразовать словарь specs в строку в формате JSON и вывести ее с отступами 
в три пробела, не заменяя кириллические символы на их коды. В программе допущена ошибка, поэтому она выводит:

{"\u041c\u043e\u0434\u0435\u043b\u044c": "AMD Ryzen 5 5600G", 
"\u0413\u043e\u0434 \u0440\u0435\u043b\u0438\u0437\u0430": 2021, 
"\u0421\u043e\u043a\u0435\u0442": "AM4", 
"\u0422\u0435\u0445\u043f\u0440\u043e\u0446\u0435\u0441\u0441": "7 \u043d\u043c", 
"\u042f\u0434\u0440\u043e": "Cezanne", "\u041e\u0431\u044a\u0435\u043c \u043a\u044d\u0448\u0430 L2": "3 \u041c\u0411", 
"\u041e\u0431\u044a\u0435\u043c \u043a\u044d\u0448\u0430 L3": "16 \u041c\u0411", 
"\u0411\u0430\u0437\u043e\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u043e\u0442\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430": "3900 \u041c\u0413\u0446"}
Найдите и исправьте ее, чтобы программа преобразовала словарь specs в строку в формате JSON и вывела ее с отступами 
в три пробела, не заменяя кириллические символы на их коды.
Примечание 1. Начальная часть ответа выглядит так:
{
   "Модель": "AMD Ryzen 5 5600G",
   "Год релиза": 2021,
   ...
Примечание 2. Используйте необязательный аргумент ensure_ascii.
"""
import json
specs = {
         'Модель': 'AMD Ryzen 5 5600G',
         'Год релиза': 2021,
         'Сокет': 'AM4',
         'Техпроцесс': '7 нм',
         'Ядро': 'Cezanne',
         'Объем кэша L2': '3 МБ',
         'Объем кэша L3': '16 МБ',
         'Базовая частота': '3900 МГц'
        }
specs_json = json.dumps(specs, ensure_ascii=False, indent=3)
print(specs_json)


""" Упражнение 5
Реализуйте функцию is_correct_json(), которая принимает один аргумент:
string — произвольная строка
Функция должна возвращать True, если строка string удовлетворяет формату JSON, или False в противном случае.
Примечание 1. Вспомните про конструкцию try-except из урока. 
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию is_correct_json(), 
но не код, вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    data = '{"name": "Barsik", "age": 7, "meal": "Wiskas"}'
    print(is_correct_json(data))
Sample Output 1:
    True
Sample Input 2:
    print(is_correct_json('number = 17'))
Sample Output 2:
    False
"""
import json
def is_correct_json(string):
    try:
        json.loads(string)
        return True
    except:
        return False


""" Упражнение 6
Напишите программу, которая принимает на вход описание одного объекта в формате JSON и выводит все пары ключ-значение 
этого объекта.
Формат входных данных
На вход программе подается корректное описание одного объекта в формате JSON.
Формат выходных данных
Программа должна вывести все пары ключ-значение введенного объекта, разделяя ключ и значение двоеточием, каждую 
на отдельной строке. Если значением ключа является список, то все его элементы должны быть выведены через запятую.
Примечание 1. Пары ключ-значение при выводе должны располагаться в своем исходном порядке.
Примечание 2. Для считывания произвольного числа строк используйте потоковый ввод sys.stdin.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    {"size": 36, "style": "bold", "name": "text1", "alignment": "center"}
Sample Output 1:
    size: 36
    style: bold
    name: text1
    alignment: center
Sample Input 2:
    {
     "type": "donut", 
     "name": "Cake", 
     "tastes": ["chocolate", "cream", "strawberry"]
    }
Sample Output 2:
    type: donut
    name: Cake
    tastes: chocolate, cream, strawberry
"""
import sys
import json
for key, value in json.loads(sys.stdin.read()).items():
    if type(value) == list:
        value = ', '.join(map(str, value))
    print(key, value, sep=': ')


""" Упражнение 7
Вам доступен файл data.json, содержащий список различных объектов:
[
   "nwkWXma",
   null,
   {
      "ISgHT": "dIUbf"
   },
   "Pzt",
   "BXcbGVTE",
   ...
]
Напишите программу, которая создает список, элементами которого являются объекты из списка, содержащегося в файле 
data.json, измененные по следующим правилам:
    если объект является строкой, в его конец добавляется восклицательный знак
    если объект является числом, он увеличивается на единицу
    если объект является логическое значением, он инвертируется
    если объект является списком, он удваивается
    если объект является JSON-объектом (словарем), в него добавляется новая пара "newkey": null
    если объект является пустым значением (null), он не добавляется
Полученный список программа должна записать в файл updated_data.json.
Примечание 1. Например, если бы файл data.json имел вид:
    ["Hello", 179, true, null, [1, 2, 3], {"key": "value"}]
то программа должна была бы создать файл updated_data.json со следующим содержанием:
    ["Hello!", 180, false, [1, 2, 3, 1, 2, 3], {"key": "value", "newkey": null}]
Примечание 2. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 3. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
def update(value):
    dct = {str: lambda x: f'{x}!', int: lambda x: x + 1, bool: lambda x: not x,
           list: lambda x: x*2, dict: lambda x: x | {"newkey": None}}
    return dct[type(value)](value)
with open('data.json', 'r', encoding='UTF-8') as file:
    data = json.load(file)
with open('updated_data.json', 'w', encoding='UTF-8') as file:
    json.dump([update(x) for x in data if x is not None], file, indent=3)


""" Упражнение 8
Вам доступны два файла data1.json и data2.json, каждый из которых содержит по единственному JSON-объекту:
    {
       "Holly-Anne": [
          33,
          "failed"
       ],
       "Caty": [
          36,
          "failed"
       ],
       ...
    }
Напишите программу, которая объединяет два данных JSON-объекта в один JSON-объект, причем если пары из первого и 
второго объектов имеют совпадающие ключи, то значение следует взять из второго объекта. Полученный JSON-объект 
программа должна записать в файл data_merge.json.
Примечание 1. Например, если бы файлы data1.json и data2.json имели вид:
    {
       "Timur": 99,
       "Anri": 97
    }
    {
       "Dima": 99,
       "Anri": 100
    }
то программа должна была бы создать файл data_merge.json со следующим содержанием:
    {
       "Anri": 100,
       "Dima": 99,
       "Timur": 99
    }
Примечание 2. Элементы в результирующем JSON-объекте могут располагаться в произвольном порядке.
Примечание 3. Указанные файлы доступны по ссылке и ссылке. Ответ на задачу доступен по ссылке.
Примечание 4. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
with open('data1.json', 'r', encoding='UTF-8') as file:
    data1 = json.load(file)
with open('data2.json', 'r', encoding='UTF-8') as file:
    data2 = json.load(file)
with open('data_merge.json', 'w', encoding='UTF-8') as file:
    json.dump(data1 | data2, file, indent=3)


""" Упражнение 9
Вам доступен файл people.json, содержащий список JSON-объектов. Причем у различных объектов может быть различное 
количество ключей:
[
   {
      "age": 33,
      "country": "Lesotho",
      "phone": "(927) 316-2249",
      "family_status": "married",
      "email": "neonatus@outlook.com"
   },
   {
      "age": 25,
      "country": "Guinea",
      "name": "Dorey",
      "children": "yes",
      "email": "ismail@gmail.com",
      "university": "Khalifa University",
      "family_status": "married"
   },
   ...
]
Напишите программу, которая добавляет в каждый JSON-объект из данного списка все недостающие ключи, присваивая этим 
ключам значение null. Ключ считается недостающим, если он присутствует в каком-либо другом объекте, но отсутствует 
в данном. Программа должна создать список с обновленными JSON-объектами и записать его в файл updated_people.json.
Примечание 1. JSON-объекты в создаваемом программой списке должны располагаться в своем исходном порядке. Порядок 
ключей в JSON-объектах не важен.
Примечание 2. Например, если бы файл people.json имел вид:
[
   {
      "age": 33,
      "country": "Lesotho"
   },
   {
      "age": 25,
      "country": "Guinea",
      "name": "Dorey"
   }
]
то программа должна была создать файла updated_people.json со следующим содержанием:
[
   {   
      "age": 33,
      "country": "Lesotho"
      "name": null
   },
   {
      "age": 25,
      "country": "Guinea",
      "name": "Dorey"
   }
]
Примечание 3. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 4. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
with open('people.json', 'r', encoding='UTF-8') as file:
    data = json.load(file)
keys = {y: None for x in data for y in x}
updated_data = [keys | x for x in data]
with open('updated_people.json', 'w', encoding='UTF-8') as file:
    json.dump(updated_data, file, indent=3)


""" Упражнение 10
Вам доступен файл countries.json, содержащий список JSON-объектов c информацией о странах и исповедуемых в них религиях:
    [
       {
          "country": "Afghanistan",
          "religion": "Islam"
       },
       {
          "country": "Albania",
          "religion": "Islam"
       },
       ...
    ]
Каждый объект из этого списка содержит два атрибута:
    country — страна
    religion — исповедуемая религия
Напишите программу, которая создает единственный JSON-объект, имеющий в качестве ключа название религии, а в качестве 
значения — список стран, в которых исповедуется данная религия. Полученный JSON-объект программа должна записать 
в файл religion.json.
Примечание 1. Страны в списках должны располагаться в своем исходном порядке.
Примечание 2. Начальная часть файла religion.json выглядит так:
{
   "Islam":[
      "Afghanistan",
      "Albania",
      "Algeria",
      ...
   ],
   ...
}
Примечание 3. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 4. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
with open('countries.json', 'r', encoding='UTF-8') as file:
    data = json.load(file)
dct = {}
for line in data:
    dct.setdefault(line['religion'], []).append(line['country'])
with open('religion.json', 'w', encoding='UTF-8') as file:
    json.dump(dct, file, indent=3)


""" Упражнение 11
Вам доступен файл playgrounds.csv с информацией о спортивных площадках Москвы. В первом столбце записан тип площадки,  
во втором — административный округ, в третьем — название района, в четвертом — адрес:
ObjectName;AdmArea;District;Address
Парк, озелененная городская территория «Лианозовский парк культуры и отдыха»;Северо-Восточный административный округ;
район Лианозово;Угличская улица, дом 13
...
Напишите программу, создающую JSON-объект, ключом в котором является административный округ, а значением — JSON-объект, 
в котором, в свою очередь, ключом является название района, относящийся к этому административному округу, а значением — 
список адресов всех площадок в этом районе. Полученный JSON-объект программа должна записать в файл addresses.json.
Примечание 1. Адреса в списках должны располагаться в своем исходном порядке.
Примечание 2. Разделителем в файле playgrounds.csv является точка с запятой, при этом кавычки не используются.
Примечание 3. Начальная часть файла addresses.json выглядит так:
    {
       "Северо-Восточный административный округ": {
          "район Лианозово": [
             "Угличская улица, дом 13",
             "Алтуфьевское шоссе, дом 147А"
          ],
          "район Отрадное": [
             "Алтуфьевское шоссе, дом 20А",
             "Юрловский проезд, дом 8, строение 1",
             "Юрловский проезд, дом 8, строение 1"
          ],
          ...
       },
       ...
    }
Примечание 4. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 5. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
import csv
dct = {}
with open('playgrounds.csv', 'r', encoding='UTF-8') as file:
    data = csv.DictReader(file, delimiter=';')
    for line in data:
        dct.setdefault(line['AdmArea'], {}).setdefault(line['District'], []).append(line['Address'])
with open('addresses.json', 'w', encoding='UTF-8') as file:
    json.dump(dct, file, indent=3)


""" Упражнение 12
Вам доступен файл students.json, содержащий список JSON-объектов, которые представляют данные о студентах некоторого 
курса:
    [
       {
          "name": "Holly-Anne",
          "city": "Abilene",
          "age": 29,
          "progress": 85,
          "phone": "(802) 983-9126"
       },
       ...
    ]
Под «студентом» мы будем подразумевать один JSON-объект из этого списка. У студента имеются следующие атрибуты:
    name — имя 
    city — город проживания
    age — возраст
    progress — прогресс по курсу в процентах
    phone— контактный номер
Напишите программу, которая определяет студентов, удовлетворяющих следующим условиям:
возраст 18 лет или более
прогресс по курсу 75% или более
Программа должна создать файл data.csv с двумя столбцами — name (имя) и phone (номер), и записать в него данные 
выбранных студентов, расположив их в лексикографическом порядке имён. В качестве разделителя в файле data.csv должна 
быть использована запятая.
Примечание 1. Гарантируется, что все студенты имеют различные имена.
Примечание 2. Начальная часть файла data.csv выглядит так:
    name,phone
    Cary,(580) 476-8517
    Catarina,(237) 608-2757
    Catherin,(876) 215-3666
    ...
Примечание 3. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 4. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
import csv
with open('students.json', 'r', encoding='UTF-8') as file:
    data = json.load(file)
header = ['name', 'phone']
lst = [[x["name"], x["phone"]] for x in data if x['age'] >= 18 and x['progress'] >= 75]
with open('data.csv', 'w', encoding='UTF-8', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(header)
    writer.writerows(sorted(lst))


""" Упражнение 13
Тимур планирует пойти в бассейн. Среди всех бассейнов ему подходят те, которые открыты в понедельник в период 
с 10:00 до 12:00. Также ему нравится плавать по длинным дорожкам, поэтому из всех работающих в это время бассейнов 
нужно выбрать бассейн с наибольшей длиной дорожки, при равных значениях — c наибольшей шириной.
Вам доступен файл pools.json, содержащий список JSON-объектов, которые представляют данные о крытых плавательных 
бассейнах:
[
   {
      "ObjectName": "Физкультурно-оздоровительный комплекс с бассейном «ГБУ «СШОР № 82» Москомспорта»",
      "AdmArea": "Северо-Восточный административный округ",
      "District": "Алтуфьевский район",
      "Address": "Инженерная улица, дом 5, корпус 1",
      "WorkingHoursSummer": {
         "Понедельник": "10:00-11:00",
         "Вторник": "10:00-11:00",
         "Среда": "10:00-11:00",
         "Четверг": "10:00-11:00",
         "Пятница": "10:00-11:00",
         "Суббота": "10:00-11:00",
         "Воскресенье": "09:00-15:00",
      },
      "DimensionsSummer": {
         "Square": 350,
         "Length": 25,
         "Width": 14,
         "Depth": 1.8
      }
   },
   ...
]
Под «бассейном» будем подразумевать один JSON-объект из этого списка. У бассейна имеются следующие атрибуты:
ObjectName — название, будь то фитнес клуб или спортивный комплекс
AdmArea — административный округ
District — название района
Address — адрес
WorkingHoursSummer — график работы, время начала и закрытия указываются в формате HH:MM
DimensionsSummer — размеры бассейна, где Square — площадь, Length — длина, Width — ширина, Depth — глубина
Напишите программу, которая определяет бассейн, подходящий Тимуру. Программа должна вывести его размеры и 
адрес в следующем формате:
    <длина>x<ширина>
    <адрес>
Примечание 1. Пример вывода:
    25x16
    Писцовая улица, дом 12, строение 1
Примечание 2. Бассейн должен быть открыт во время всего периода с 10:00 до 12:00. Например, если бассейн работает 
в 10:00, но не работает в 11:30, он не подходит.
Примечание 3. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 4. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
with open('pools.json', 'r', encoding='UTF-8') as file:
    data = json.load(file)
success_pool = [0, 0, ''] #Длина, ширина, адрес
for line in data:
    time = line['WorkingHoursSummer']['Понедельник']
    if time.startswith('10:00') and int(time[6:8]) - int(time[:2]) >= 2:
        l, h = line['DimensionsSummer']['Length'], line['DimensionsSummer']['Width']
        if l > success_pool[0] or (l == success_pool[0] and h > success_pool[1]):
            success_pool = [l, h, line['Address']]
print(f'{success_pool[0]}x{success_pool[1]}\n{success_pool[2]}')


""" Упражнение 14
Вам доступен файл exam_results.csv, который содержит информацию о прошедшем экзамене в некотором учебном заведении. 
В первом столбце записано имя студента, во втором — фамилия, в третьем — оценка за экзамен, в четвертом — дата и 
время сдачи в формате YYYY-MM-DD HH:MM:SS, в пятом — адрес электронной почты:
    name,surname,score,date_and_time,email
    Jayson,Edwards,2,2021-11-10 10:00:00,sonnen@yahoo.com
    April,Sims,3,2021-11-01 11:00:00,retoh@outlook.com
    ...
Каждый студент имеет право пересдать экзамен два раза, поэтому он может встречаться в исходном файле до трёх раз с 
различной оценкой и различными датой и временем сдачи.
Напишите программу, которая для каждого студента определяет его максимальную оценку, а также дату и время ее получения. 
Программа должна создать список словарей, каждый из которых содержит следующие пары ключ-значение:
    name — имя студента
    surname — фамилия студента
    best_score — максимальная оценка за экзамен
    date_and_time — дата и время получения максимальной оценки в исходном формате
    email — адрес электронной почты
Полученный список программа должна записать в файл best_scores.json, причем словари в списке должны быть расположены в 
лексикографическом порядке названий электронных почт.
Примечание 1. Если при пересдаче студент получил такую же оценку, что и в прошлый раз, то в качестве даты следует 
указать дату пересдачи.
Примечание 2. В качестве разделителя в файле exam_results.csv используется запятая, при этом кавычки не используются.
Примечание 3. Начальная часть файла best_scores.json выглядит так:
    [
       {
          "name": "Stephen",
          "surname": "Farley",
          "best_score": 3,
          "date_and_time": "2021-11-12 12:00:00",
          "email": "aardo@mac.com"
       },
       {
          "name": "Kaylen",
          "surname": "Horne",
          "best_score": 4,
          "date_and_time": "2021-11-09 11:00:00",
          "email": "aaribaud@att.net"
       },
       ...
    ]
Примечание 4. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 5. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
import csv
dct = {}
with open('exam_results.csv', 'r', encoding='UTF-8') as file:
    data = csv.DictReader(file)
    for line in data:
        if line['email'] not in dct:
            dct[line['email']] = dict([(k, v) if k != 'score' else ('best_score', int(v)) for k, v in line.items()])
        else:
            lst = [[dct[line['email']]['best_score'], dct[line['email']]['date_and_time']],
                   [int(line['score']), line['date_and_time']]]
            lst.sort(reverse=True)
            dct[line['email']]['best_score'], dct[line['email']]['date_and_time'] = lst[0][0], lst[0][1]

with open('best_scores.json', 'w', encoding='UTF-8') as file:
    json.dump([dct[x] for x in sorted(dct)], file, indent=3)


""" Упражнение 15
Вам доступен файл food_services.json, содержащий список JSON-объектов, которые представляют данные о заведениях 
общественного питания:
[
   {
      "Name": "СМЕТАНА",
      "IsNetObject": "нет",
      "OperatingCompany": "",
      "TypeObject": "кафе",
      "AdmArea": "Северо-Восточный административный округ",
      "District": "Ярославский район",
      "Address": "город Москва, улица Егора Абакумова, дом 9",
      "SeatsCount": 48
   },
   ...
]
Под «заведением» будем подразумевать один JSON-объект из этого списка. У заведения имеются следующие атрибуты:
    Name — название 
    IsNetObject — да\нет в зависимости от того, является ли заведение сетевым
    OperatingCompany — название сети
    TypeObject — вид (кафе, столовая, ресторан и т.д.)
    AdmArea — административная зона
    District — район
    Address — полный адрес
    SeatsCount — количество мест
Напишите программу, которая:
определяет район Москвы, в котором находится больше всего заведений, и выводит название этого района и количество 
заведений в нем
определяет сеть с самым большим числом заведений и выводит название этой сети и количество заведений этой сети
Полученные значения программа должна вывести в следующем формате:
    <район>: <количество заведений>
    <название сети>: <количество заведений>
Примечание 1. Гарантируется, что искомая сеть единственная.
Примечание 2. Пример вывода:
    район Метрогородок: 456
    Французская пекарня SeDelice: 144
Примечание 3. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 4. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
district = {}
system = {}
with open('food_services.json', 'r', encoding='UTF-8') as file:
    data = json.load(file)
for line in data:
    district[line['District']] = district.get(line['District'], 0) + 1
    if line['OperatingCompany'] != '':
        system[line['OperatingCompany']] = system.get(line['OperatingCompany'], 0) + 1
max_dis = max(district, key=lambda x: district[x])
max_sys = max(system, key=lambda x: system[x])
print(f'{max_dis}: {district[max_dis]}', f'{max_sys}: {system[max_sys]}', sep='\n')


""" Упражнение 16
Вам доступен файл food_services.json, содержащий список JSON-объектов, которые представляют данные о заведениях 
общественного питания:
[
   {
      "Name": "СМЕТАНА",
      "IsNetObject": "нет",
      "OperatingCompany": "",
      "TypeObject": "кафе",
      "AdmArea": "Северо-Восточный административный округ",
      "District": "Ярославский район",
      "Address": "город Москва, улица Егора Абакумова, дом 9",
      "SeatsCount": 48
   },
   ...
]
Под «заведением» будем подразумевать один JSON-объект из этого списка. У заведения имеются следующие атрибуты:
    Name — название 
    IsNetObject — да\нет в зависимости от того, является ли заведение сетевым
    OperatingCompany — название сети
    TypeObject — вид (кафе, столовая, ресторан и т.д.)
    AdmArea — административная зона
    District — район
    Address — полный адрес
    SeatsCount — количество посадочных мест
Напишите программу, которая определяет все виды заведений и для каждого вида находит самое большое заведение этого вида 
(имеет наибольшее количество посадочных мест). Программа должна вывести все виды заведений в лексикографическом порядке, 
указав для каждого самое большое заведение и количество посадочных мест в нем. Данные о заведениях должны быть 
расположены каждые на отдельной строке, в следующем формате:
    <вид заведения>: <название заведения>, <количество посадочных мест>
Примечание 1. Начальная часть ответа выглядит так:
    бар: Барное объединение ПРОФСОЮЗ, 800
    буфет: СТОЛОВАЯ - КАНТИНАСИТИ, 320
    закусочная: Бургерная FARШ, 74
    ...
Примечание 2. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 3. При открытии файла используйте явное указание кодировки UTF-8.
"""
import json
systems = {}
with open('food_services.json', 'r', encoding='UTF-8') as file:
    data = json.load(file)
for line in data:
    a = systems.setdefault(line['TypeObject'], ['', 1])
    if line['SeatsCount'] > a[1]:
        systems[line['TypeObject']] = [line['Name'], line['SeatsCount']]
for obj in sorted(systems):
    print(f'{obj}: {systems[obj][0]}, {systems[obj][1]}')

""" Упражнение 1
Вам доступен список files, содержащий названия различных файлов. Дополните приведенный ниже код, чтобы он вывел все
расширения файлов, присутствующие в списке files, указав для каждого количество файлов с данным расширением. Расширения
должны быть расположены в лексикографическом порядке, каждый на отдельной строке, в следующем формате:
    <расширение>: <количество файлов>
Примечание. Начальная часть ответа выглядит так:
    csv: 5
    exe: 12
    ...
"""
from collections import Counter
files = ['emoji_smile.jpeg', 'city-of-the-sun.mp3', 'dhook_hw.json', 'sample.xml',
         'teamspeak3.exe', 'project_module3.py', 'math_lesson3.mp4', 'old_memories.mp4',
         'spiritfarer.exe', 'backups.json', 'python_for_beg1.mp4', 'emoji_angry.jpeg',
         'exam_results.csv', 'project_main.py', 'classes.csv', 'plants.xml',
         'cant-help-myself.mp3', 'microsoft_edge.exe', 'steam.exe', 'math_lesson4.mp4',
         'city.jpeg', 'bad-disease.mp3', 'beauty.jpeg', 'hollow_knight_silksong.exe',
         'whatsapp.exe', 'photoshop.exe', 'telegram.exe', 'yandex_browser.exe',
         'math_lesson7.mp4', 'students.csv', 'emojis.zip', '7z.zip',
         'bones.mp3', 'python3.zip', 'dhook_lsns.json', 'carl_backups.json',
         'forest.jpeg', 'python_for_pro8.mp4', 'yandexdisc.exe', 'but-you.mp3',
         'project_module1.py', 'nothing.xml', 'flowers.jpeg', 'grades.csv',
         'nvidia_gf.exe', 'small_txt.zip', 'project_module2.py', 'tab.csv',
         'note.xml', 'sony_vegas11.exe', 'friends.jpeg', 'data.pkl']
cf = Counter([x.split('.')[-1] for x in files])
for key, value in sorted(cf.items()):
    print(f'{key}: {value}')


""" Упражнение 2
Реализуйте функцию count_occurences(), которая принимает два аргумента в следующем порядке:
    word — слово
    words — последовательность слов, разделенных пробелом
Функция должна определять, сколько раз слово word встречается в последовательности words, и возвращать полученный 
результат.
Примечание 1. Функция должна игнорировать регистр. То есть, например, слова Python и python считаются одинаковыми.
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию count_occurences(), 
но не код, вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    word = 'python'
    words = 'Python Conferences python training python events'
    
    print(count_occurences(word, words))
Sample Output 1:
    3
Sample Input 2:
    word = 'Java'
    words = 'Python C++ C# JavaScript Go Assembler'
    
    print(count_occurences(word, words))
Sample Output 2:
    0
"""
from collections import Counter
def count_occurences(word, words):
    return Counter(words.lower().split())[word.lower()]


""" Упражнение 3
Тимур составляет список покупок, но так как на его клавиатуре перестал работать блок с цифрами, то вместо указания 
количества товара числом, он добавляет его в список столько раз, сколько планирует купить. Все товары Тимур записывает 
в нижнем регистре через запятую.
Напишите программу, которая выводит все товары из данного списка покупок, указывая для каждого его количество.
Формат входных данных
На вход программе подается последовательность товаров, разделенных запятой без пробелов.
Формат выходных данных
Программа должны вывести все введенные товары, указывая для каждого, сколько раз он встречается в данной 
последовательности. Товары должны быть расположены в лексикографическом порядке, каждый на отдельной строке,
в следующем формате:
    <товар>: <количество>
Примечание. Тестовые данные доступны по ссылке. 
Sample Input 1:
    лимон,лимон,лимон,груша,банан,банан,киви,киви,киви,киви
Sample Output 1:
    банан: 2
    груша: 1
    киви: 4
    лимон: 3
Sample Input 2:
    рубашка,футболка,футболка,брюки,футболка,рубашка,носки,рубашка
Sample Output 2:
    брюки: 1
    носки: 1
    рубашка: 3
    футболка: 3
"""
from collections import Counter
for key, value in sorted(Counter(input().split(',')).items()):
    print(f'{key}: {value}')


""" Упражнение 4
Тимур живет в мире, в котором цена товара определяется как сумма Unicode кодов букв его названия. Буквенным обозначением 
данной валюты являются две заглавные латинские буквы UC. Например, ручка в его мире стоит:
1088 + 1091 + 1095 + 1082 + 1072 = 5428
Тимур составляет список покупок, но так как на его клавиатуре перестал работать блок с цифрами, то вместо указания 
количества товара числом, он добавляет его в список столько раз, сколько планирует купить. Все товары Тимур записывает 
в нижнем регистре через запятую.
Напишите программу, которая группирует одинаковые товары из данного списка покупок и определяет стоимость каждой группы.
Формат входных данных
На вход программе подается последовательность товаров, разделенных запятой без пробелов.
Формат выходных данных
Программа должна сгруппировать одинаковые товары, определить общую стоимость каждой группы и вывести полученный 
результат. Товары должны быть расположены в лексикографическом порядке, каждый на отдельной строке, в следующем формате:
    <товар>: <цена за единицу товара> UC x <количество товаров в группе> = <общая стоимость группы> UC
Примечание 1. Программа должна добавлять нужное количество пробелов, если название имеет меньшую длину, чем другие.
Примечание 2. Получить Unicode код символа можно с помощью функции ord().
Sample Input 1:
    лимон,лимон,лимон,груша,банан,банан,киви,киви,киви,киви
Sample Output 1:
    банан: 5387 UC x 2 = 10774 UC
    груша: 5422 UC x 1 = 5422 UC
    киви : 4316 UC x 4 = 17264 UC
    лимон: 5418 UC x 3 = 16254 UC
Sample Input 2:
    рубашка,футболка,футболка,брюки,футболка,сырный соус,рубашка,носки,рубашка
Sample Output 2:
    брюки      : 5425 UC x 1 = 5425 UC
    носки      : 5422 UC x 1 = 5422 UC
    рубашка    : 7574 UC x 3 = 22722 UC
    сырный соус: 10896 UC x 1 = 10896 UC
    футболка   : 8669 UC x 3 = 26007 UC
"""
from collections import Counter
counter = Counter(input().split(','))
for key, value in sorted(counter.items()):
    name = key.ljust(len(max(counter, key=len)), " ")
    uc = sum(ord(x) for x in key if x != ' ')
    print(f'{name}: {uc} UC x {value} = {uc * value} UC')


""" Упражнение 5
Вам доступен текстовый файл pythonzen.txt, содержащий текст на английском языке:
    The Zen of Python, by Tim Peters
    
    Beautiful is better than ugly.
    Explicit is better than implicit.
    ...
Напишите программу, которая определяет, сколько раз встречается каждая буква в этом тексте. Буквы и их количество должны 
выводиться в лексикографическом порядке, каждая на отдельной строке, в следующем формате:
    <буква>: <количество>
Примечание 1. Начальная часть ответа выглядит так:
    a: 53
    b: 21
    ...
Примечание 2. Программа не должна учитывать регистр, то есть, например, буквы a и A считаются одинаковыми.
Примечание 3. Программа должна игнорировать все небуквенные символы.
Примечание 4. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 5. При открытии файла используйте явное указание кодировки UTF-8.
"""
from collections import Counter
with open('pythonzen.txt', 'r', encoding='UTF-8') as file:
    data = file.read()
counter = Counter([x.lower() for x in data if x.isalpha()])
for key, value in sorted(counter.items()):
    print(f'{key}: {value}')

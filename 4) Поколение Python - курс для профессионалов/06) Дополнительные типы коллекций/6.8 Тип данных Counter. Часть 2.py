""" Упражнение 1
Дана последовательность слов. Напишите программу, которая выводит наиболее часто встречаемое слово в этой
последовательности.
Формат входных данных
На вход программе подается последовательность слов, разделенных пробелом.
Формат выходных данных
Программа должна определить наиболее часто встречаемое слово в введенной последовательности и вывести его в нижнем
регистре.
Примечание 1. Гарантируется, что искомое слово единственное.
Примечание 2. Программа должна игнорировать регистр. То есть, например, слова Python и python считаются одинаковыми.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    Черешня Вишня Арбуз малина Малина клубникА Арбуз Банан вишня малина
Sample Output 1:
    малина
Sample Input 2:
    Арбуз Малина малина Арбуз клубника АрбуЗ Банан Малина вишня Черешня Вишня арбуз
Sample Output 2:
    арбуз
Sample Input 3:
    Клубника Малина Арбуз Малина Клубника Арбуз Банан Малина Клубника Вишня Клубника Черешня Вишня
Sample Output 3:
    клубника
"""
from collections import Counter
print(Counter(x.lower() for x in input().split()).most_common(1)[0][0])


""" Упражнение 2
Дана последовательность слов. Напишите программу, которая выводит наименее часто встречаемое слово в этой 
последовательности. Если таких слов несколько, программа должна вывести их все.
Формат входных данных
На вход программе подается последовательность слов, разделенных пробелом.
Формат выходных данных
Программа должна определить наименее часто встречаемое слово в введенной последовательности и вывести его в нижнем 
регистре. Если таких слов несколько, программа должна вывести их все в лексикографическом порядке, в нижнем регистре, 
разделяя запятой.
Примечание 1. Программа должна игнорировать регистр. То есть, например, слова Python и python считаются одинаковыми.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    Арбуз Малина Малина Арбуз Клубника арбуз банан малина вишня черешня вишня арбуЗ
Sample Output 1:
    банан, клубника, черешня
Sample Input 2:
    арбуз МалинА клубника Банан Вишня Черешня
Sample Output 2:
    арбуз, банан, вишня, клубника, малина, черешня
Sample Input 3:
    арбуз черешня малина малина арбуз арбуз Банан малина вишня черешня вишня арбуз
Sample Output 3:
    банан
"""
from collections import Counter
counter = Counter(x.lower() for x in input().split())
print(*sorted(filter(lambda x: counter[x] == min(counter.values()), counter)), sep=', ')


""" Упражнение 3
Дана последовательность слов. Напишите программу, которая выводит наиболее часто встречаемое слово в этой 
последовательности. Если таких слов несколько, программа должна вывести то, которое больше в лексикографическом 
сравнении.
Формат входных данных
На вход программе подается последовательность слов, разделенных пробелом.
Формат выходных данных
Программа должна определить наиболее часто встречаемое слово в введенной строке и вывести его в нижнем регистре. Если 
таких слов несколько, программа должна вывести то, которое больше в лексикографическом сравнении, так же в 
нижнем в регистре.
Примечание 1. Программа должна игнорировать регистр. То есть, например, слова Python и python считаются одинаковыми.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    Арбуз Малина арбуЗ Клубника арбуз банан малина черешня вишня арбуз клубника Банан
Sample Output 1:
    арбуз
Sample Input 2:
    МаЛиНа клубника Арбуз банаН Малина Черешня вишня арбуз клубника банан
Sample Output 2:
    малина
Sample Input 3:
    малина малина клубника арбуз банан малина черешня вишня арбуз клубника банан малина
Sample Output 3:
    малина
"""
from collections import Counter
counter = Counter(x.lower() for x in input().split())
print(max(filter(lambda x: counter[x] == max(counter.values()), counter)))


""" Упражнение 4
Дана последовательность слов. Напишите программу, которая группирует слова из этой последовательности по их длине и 
определяет количество слов в каждой полученной группе.
Формат входных данных
На вход программе подается последовательность слов, разделенных пробелом.
Формат выходных данных
Программа должна сгруппировать слова из введенной последовательности по их длине и определить количество слов в каждой 
полученной группе. Каждую группу характеризуют два числа — длина слов в этой группе и количество слов в этой группе. 
Например, для группы {is, to, hi, no} это числа 2 и 4. Программа должна вывести данные о каждой группе, расположив их в 
порядке увеличения количества слов в них, каждые на отдельной строке, в следующем формате:
    Слов длины <длина слов в группе>: <количество слов в группе>
Примечание 1. Если две разные группы имеют равное количество слов, то первой должна следовать та группа, слово которой 
в исходной последовательности встречается раньше.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    Любимой песни слог Знакомый ритм слов Панацея от всего
Sample Output 1:
    Слов длины 8: 1
    Слов длины 2: 1
    Слов длины 7: 2
    Слов длины 5: 2
    Слов длины 4: 3
Sample Input 2:
    Не сможет больше мальчик дотронуться до солнца
Sample Output 2:
    Слов длины 7: 1
    Слов длины 11: 1
    Слов длины 2: 2
    Слов длины 6: 3
"""
# Counter сортирует словарь по значениям в порадке убывания. Если значения нескольких ключей одинаковые, то ключи
# будут записаны в порядке их встречи в итерируемом объекте.
# Например, Counter([8, 2, 2, 7, 1, 1]) выведет Counter({2: 2, 1: 2, 8: 1, 7: 1}) - 8 и 7 сохранили свой порядок.
from collections import Counter
counter = Counter(len(x) for x in input().split())
for key, value in sorted(counter.items(), key=lambda x: x[1]):
    print(f'Слов длины {key}: {value}')


""" Упражнение 5
Дан список имен учеников и их оценок за экзамен. Напишите программу, которая определяет второго по счету ученика, 
имеющего самую низкую оценку.
Формат входных данных
На вход программе подается произвольное количество строк, в каждой из которых записаны имя очередного ученика и его 
оценка, разделенные пробелом.
Формат выходных данных
Программа должна определить второго по счету ученика, который имеет самую низкую оценку, и вывести его имя.
Примечание 1. Гарантируется, что все ученики имеют различные имена и оценки.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    Тимур 100
    Анри 88
    Дима 94
    Артур 82
    Владимир 90
Sample Output 1:
    Анри
Sample Input 2:
    Эллиот 100
    Эбигейл 99
    Марни 98
    Винсент 97
    Кробус 96
    Пенни 95
Sample Output 2:
    Кробус
"""
import sys
from collections import Counter
data = Counter({key: int(value) for key, value in map(str.split, sys.stdin.readlines())})
print(data.most_common()[-2][0])


""" Упражнение 6
Вам доступна переменная data, содержащая Counter словарь. Дополните приведенный ниже код, чтобы он добавил этому 
словарю два атрибута:
    min_values() — функция, которая возвращает список элементов, имеющих наименьшее значение
    max_values() — функция, которая возвращает список элементов, имеющих наибольшее значение
Обе функции не должны принимать никаких аргументов.
Примечание 1. Элементом словаря будем считать кортеж (ключ, значение).
Примечание 2. Элементы словаря в возвращаемых функциями списках должны располагаться в своем исходном порядке.
Примечание 3. Функции data.min_values() и data.max_values() должны учитывать содержимое словаря. Например, 
если в словарь data будет добавлена новая пара ключ-значение, то и в возвращаемых функциями списках данные ключ и 
значение должны присутствовать.
Примечание 4. Программа ничего не должна выводить.
Примечание 5. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(data.max_values())
Sample Output 1:
    [('j', 8), ('q', 8)]
Sample Input 2:
    print(data.min_values())
Sample Output 2:
    [('t', 1)]
"""
from collections import Counter
data = Counter('aksjaskfjsklfjdslkfjajfopewtoieqpwdpqworiiqjskanvmcxbmpewrqopkqwlmdzczmxvmvlnjpjqpkqzxvmbowiqeorewi')
data.min_values = lambda: list(filter(lambda x: x[1] == min(data.values()), data.items()))
data.max_values = lambda: list(filter(lambda x: x[1] == max(data.values()), data.items()))

""" Упражнение 7
Вам доступен файл name_log.csv, в котором находятся логи изменения имени пользователя. В первом столбце записано 
измененное имя пользователя, во втором — адрес электронной почты, в третьем — дата и время изменения. При этом email 
пользователь менять не может, только имя:
    username,email,dtime
    rare_charles6,charlesthompson@inbox.ru,15/11/2021 08:15
    busy_patricia5,patriciasmith@bk.ru,07/11/2021 08:07
    ...
Напишите программу, которая определяет, сколько раз пользователь менял имя. Программа должна вывести адреса электронных 
почт пользователей, указав для каждого соответствующее количество смененных имен. Почтовые ящики должны быть расположены 
в лексикографическом порядке, каждый на отдельной строке, в следующем формате:
    <адрес электронной почты>: <количество изменений имен>
Примечание 1. Начальная часть ответа выглядит так:
    barbaraanderson@bk.ru: 3
    barbarabrown@rambler.ru: 3
    ...
Примечание 2. Указанный файл доступен по ссылке. Ответ на задачу доступен по ссылке.
Примечание 3. При открытии файла используйте явное указание кодировки UTF-8.
"""
import csv
from collections import Counter
with open('name_log.csv', 'r', encoding='UTF-8') as file:
    data = csv.reader(file)
    next(data)
    counter = Counter(x[1] for x in data)
for key, value in sorted(counter.items(), key=lambda x: x[0]):
    print(f'{key}: {value}')


""" Упражнение 8
Реализуйте функцию scrabble(), которая принимает два аргумента в следующем порядке:
    symbols — набор символов
    word — слово
Функция должна возвращать True, если из набора символов symbols можно составить слово word, 
или False в противном случае.
Примечание 1. При проверке учитывается количество символов, которые нужны для составления слова,
и не учитывается их регистр.
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию scrabble(), 
но не код, вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(scrabble('bbbbbeeeeegggggggeeeeeekkkkk', 'Beegeek'))
Sample Output 1:
    True
Sample Input 2:
    print(scrabble('begk', 'beegeek'))
Sample Output 2:
    False
Sample Input 3:
    print(scrabble('beegeek', 'beegeek'))
Sample Output 3:
    True
"""
from collections import Counter
def scrabble(symbols, word):
    return Counter(symbols.lower()) >= Counter(word.lower())


""" Упражнение 9
Реализуйте функцию print_bar_chart(), которая принимает два аргумента в следующем порядке:
    data — строка или список строк
    mark — одиночный символ
Функция должна определять:
    сколько раз встречается каждый символ в строке, если data является строкой
    сколько раз встречается каждая строка в списке, если data является списком
Затем функция должна выводить результат в виде столбчатой диаграммы, указывая каждый символ (строку) и его количество. 
Количество отображается как повторение символа mark соответствующее число раз, например, если mark='+', то количество, 
равное четырем, будет отображено как ++++. Символы (строки) в диаграмме должны быть расположены в порядке уменьшения 
количества, при равных количествах — в своем исходном порядке, каждая на отдельной строке, в следующем формате:
    <символ или строка> |<количество>
Примечание 1. Обратите внимание на второй тест, функция должна добавлять нужное количество пробелов, если строка имеет 
меньшую длину, чем другие.
Примечание 2. Программа должна учитывать регистр. То есть, например, строки Python и python считаются различными.
Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию print_bar_chart(), 
но не код, вызывающий ее.
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    print_bar_chart('beegeek', '+')
Sample Output 1:
    e |++++
    b |+
    g |+
    k |+
Sample Input 2:
    languages = ['java', 'java', 'python', 'C++', 'assembler', 'java', 'C++', 'C', 'pascal', 'C++', 'pascal', 'java']
    
    print_bar_chart(languages, '#')
Sample Output 2:
    java      |####
    C++       |###
    pascal    |##
    python    |#
    assembler |#
    C         |#
"""
from collections import Counter
def print_bar_chart(data, mark):
    counter = Counter(data)
    for key, value in counter.most_common():
        print(f'{key.ljust(len(max(counter, key=len)), " ")} |{mark*value}')


""" Упражнение 10
Для дополнительного заработка Тимур решил заняться продажей овощей. У него имеются данные о продажах за год, разделенные 
на четыре файла по кварталам: quarter1.csv, quarter2.csv, quarter3.csv и quarter4.csv. В каждом файле в первом столбце 
указывается название продукта, а в последующих — количество проданного продукта в килограммах за определенный месяц:
    продукт,январь,февраль,март
    Картофель,39,61,3
    Дайкон,51,96,83
    ...
Также присутствует файл prices.json, содержащий словарь, в котором ключом является название продукта, а значением — цена 
за килограмм в рублях:
    {
       "Картофель": 53,
       "Дайкон": 55,
    ...
    }
Напишите программу, которая выводит единственное число — сумму, заработанную Тимуром за год на продаже овощей.
Примечание 1. Ссылки на указанные файлы: quarter1.csv, quarter2.csv, quarter3.csv, quarter4.csv, prices.json. 
Ответ на задачу доступен по ссылке.
Примечание 2. При открытии файла используйте явное указание кодировки UTF-8.
"""
import csv
import json
from collections import Counter
with open('prices.json', 'r', encoding='UTF-8') as file:
    prices = json.load(file)
counter = Counter()
for name in ('quarter1.csv', 'quarter2.csv', 'quarter3.csv', 'quarter4.csv'):
    with open(name, 'r', encoding='UTF-8') as file:
        quarter = csv.reader(file)
        next(quarter)
        counter += Counter({x[0]: sum(map(int, x[1:])) for x in quarter})
print(sum(counter[x] * prices[x] for x in counter))


""" Упражнение 11
Тимур продает книги по математике за 11—1111 класс. У него есть список, в котором указаны все книги, имеющиеся в 
наличии. К Тимуру приходят nn покупателей, называют номер класса, за который они хотят приобрести книгу, и сумму, 
которую они готовы заплатить, и если книга есть в наличии, Тимур ее продает.
Напишите программу, которая вычисляет общую сумму денег, которую Тимур заработает на продаже книг.
Формат входных данных
На вход программе в первой строке подается последовательность чисел, разделенных пробелом, представляющих набор книг, 
которые имеются в наличии. Каждое число последовательности — книга за указанный класс, например, 
последовательность 1 1 4 представляет набор из двух книг за первый класс и одной книги за четвертый класс. Вторая строка 
содержит число nn — количество покупателей. В последующих nn строках вводятся два числа, разделенные пробелом, где 
первое число является номером класса, второе — суммой, предлагаемой покупателем.
Формат выходных данных
Программа должна вывести единственное число — общую сумму денег, которую заработал Тимур.
Примечание. Рассмотрим первый тест. В первой строке указан список книг, которые есть в наличии:
    2 книги за 1-й класс
    1 книга за 11-й класс
    3 книги за 9-й класс
    2 книги за 5-й класс
    1 книга за 7-й класс
В следующей строке указано число 7 — количество покупателей. Последующие 7 строк содержат номер класса и некоторую сумму:
    первый покупатель приобретает книгу за 1-й класс за 300р
    второй покупатель приобретает книгу за 1-й класс за 250р
    третий покупатель приобретает книгу за 11-й класс за 400р
    книг за 1-й класс больше нет в наличии, поэтому покупка невозможна
    пятый покупатель приобретает книгу за 7-й класс за 200200р
    шестой покупатель приобретает книгу за 9-й класс за 400400р
    книг за 7-й класс больше нет в наличии, поэтому покупка невозможна
Итого Тимур заработал 300 + 250 + 400 + 200 + 400 =1550р.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    1 1 11 9 5 5 7 9 9
    7
    1 300
    1 250
    11 400
    1 300
    7 200
    9 400
    7 250
Sample Output 1:
    1550
Sample Input 2:
    1 1 2 3 4 5
    3
    9 1000
    10 2000
    11 1500
Sample Output 2:
    0
"""
from collections import Counter
books = Counter(map(int, input().split()))
c = 0
for _ in range(int(input())):
    y, p = map(int, input().split())
    if books[y] > 0:
        c += p
    books[y] -= 1
print(c)

""" Упражнение 1
Реализуйте функцию get_weekday(), которая принимает один аргумент:
number — целое число (от 1 до 7 включительно)
Функция должна возвращать полное название дня недели на русском, который соответствует числу number, при этом:
если number не является целым числом, функция должна возбуждать исключение:
    TypeError('Аргумент не является целым числом')
если number является целым числом, но не принадлежит отрезку [1;7], функция должна возбуждать исключение:
    ValueError('Аргумент не принадлежит требуемому диапазону')
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию get_weekday(),
но не код, вызывающий ее.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(get_weekday(1))
Sample Output 1:
    Понедельник
Sample Input 2:
    try:
        print(get_weekday('hello'))
    except Exception as err:
        print(err)
        print(type(err))
Sample Output 2:
    Аргумент не является целым числом
    <class 'TypeError'>
Sample Input 3:
    try:
        print(get_weekday(8))
    except ValueError as err:
        print(err)
        print(type(err))
Sample Output 3:
    Аргумент не принадлежит требуемому диапазону
    <class 'ValueError'>
"""
week = {1: "Понедельник", 2: "Вторник", 3: "Среда", 4: "Четверг", 5: "Пятница", 6: "Суббота", 7: "Воскресенье"}
def get_weekday(number):
    if isinstance(number, int):
        if int(number) in week:
            return week[int(number)]
        else:
            raise ValueError('Аргумент не принадлежит требуемому диапазону')
    else:
        raise TypeError('Аргумент не является целым числом')


""" Упражнение 2
В онлайн-школе BEEGEEK имя ученика считается корректным, если оно начинается с заглавной латинской буквы, за которой 
следуют строчные латинские буквы. Например, имена Timur и Yo считаются корректными, а имена timyrik, Yo17, TimuRRR нет. 
Также у каждого ученика имеется идентификационный номер, представленный натуральным числом, который выдается при 
поступлении в школу. К примеру, если в школе обучается 1010 учеников, то новый прибывший ученик получит 
идентификационный номер равный 11.
Реализуйте функцию get_id(), которая принимает два аргумента:
    names — список имен учеников, обучающихся в школе
    name — имя поступающего ученика
Функция должна возвращать идентификационный номер, который получит поступающий в школу ученик, при этом
если имя ученика name не является строкой (тип str), функция должна возбуждать исключение:
    TypeError('Имя не является строкой')
если имя ученика name является строкой (тип str), но не представляет собой корректное имя, функция должна возбуждать 
исключение:
    ValueError('Имя не является корректным')
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию get_id(), но не код, 
вызывающий ее. 
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    names = ['Timur', 'Anri', 'Dima']
    name = 'Arthur'
    
    print(get_id(names, name))
Sample Output 1:
    4
Sample Input 2:
    names = ['Timur', 'Anri', 'Dima', 'Arthur']
    name = 'Ruslan1337'
    
    try:
        print(get_id(names, name))
    except ValueError as e:
        print(e)
Sample Output 2:
    Имя не является корректным
Sample Input 3:
    names = ['Timur', 'Anri', 'Dima', 'Arthur', 'Ruslan']
    name = ['E', 'd', 'u', 'a', 'r', 'd']
    
    try:
        print(get_id(names, name))
    except TypeError as e:
        print(e)
Sample Output 3:
    Имя не является строкой
"""
def get_id(names, name):
    if isinstance(name, str):
        if name == name.capitalize() and name.isalpha():
            return len(names) + 1
        else:
            raise ValueError('Имя не является корректным')
    else:
        raise TypeError('Имя не является строкой')


""" Упражнение 3
Напишите программу, которая принимает на вход название JSON файла, десериализует содержащийся в этом файле объект и 
выводит его.
если файла с данным названием нет в папке с программой, программа должна вывести текст:
    Файл не найден
если файл с данным названием содержит некорректные данные (то есть не удовлетворяющие формату JSON), 
программа должна вывести текст:
    Ошибка при десериализации
Формат входных данных
На вход программе подается название JSON файла.
Формат выходных данных
Программа должна десериализовать объект, содержащийся в файле с введенным названием, и вывести его. Если при поиске 
файла или десериализации его содержимого произошла ошибка, программа должна вывести соответствующий текст.
Примечание 1. Название подаваемого файла уже содержит расширение.
Примечание 2. В первом тесте файл numbers.json имеет следующее содержание
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Файл countries.json, представленный во втором тесте, отсутствует в папке с программой.
В третьем тесте файл stores.json имеет следующее содержание:
[}{}D}A{Sd]as][d]as[d][A}SD[as]d[][1111111111111[{}0002
Sample Input 1:
    numbers.json
Sample Output 1:
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Sample Input 2:
    countries.json
Sample Output 2:
    Файл не найден
Sample Input 3:
    stores.json
Sample Output 3:
    Ошибка при десериализации
"""
import json

try:
    file = open(input(), encoding='UTF-8')
    print(json.load(file))
except FileNotFoundError:
    print('Файл не найден')
except json.decoder.JSONDecodeError:
    print('Ошибка при десериализации')
finally:
    file.close()

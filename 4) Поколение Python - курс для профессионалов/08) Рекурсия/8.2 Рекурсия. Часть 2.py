""" Упражнение 1
Вам доступна функция traffic(), реализованная с помощью цикла while, которая принимает в качестве аргумента число n и
выводит n раз строку Не парковаться.
Перепишите данную функцию с использованием рекурсии, чтобы она выполняла ту же задачу.
Примечание. В тестирующую систему сдайте программу, содержащую только необходимую функцию traffic(), но не код,
вызывающий ее.
Sample Input 1:
    traffic(3)
Sample Output 1:
    Не парковаться
    Не парковаться
    Не парковаться
Sample Input 2:
    traffic(5)
Sample Output 2:
    Не парковаться
    Не парковаться
    Не парковаться
    Не парковаться
    Не парковаться
Sample Input 3:
    traffic(0)
Sample Output 3:
"""
def traffic(n):
    if n > 0:
        print('Не парковаться')
        traffic(n-1)


""" Упражнение 2
Напишите программу с использованием рекурсии, которая выводит последовательность натуральных чисел
от 1 до 100 включительно.
Формат входных данных
    На вход программе ничего не подается.
Формат выходных данных
    Программа должны вывести последовательность натуральных чисел от 11 до 100100 включительно, 
каждое на отдельной строке.
Примечание. Начальная часть ответа выглядит так:
    1
    2
    3
    4
    5
    ...
"""
def print_n():
    def rec(n):
        if n < 101:
            print(n)
            rec(n+1)
    rec(1)

print_n()


""" Упражнение 3
Вам доступен список numbers, содержащий ровно 100 целых чисел. Дополните приведенный ниже код с использованием рекурсии, 
чтобы он вывел все элементы этого списка от первого до последнего, каждый на отдельный строке, в следующем формате:
    Элемент <индекс элемента>: <значение элемента>
Примечание. Начальная часть ответа выглядит так:
    Элемент 0: 243
    Элемент 1: -279
    Элемент 2: 395
    ...
"""
numbers = [243, -279, 395, 130, 89, 269, 861, 669, 939, 367, -46, 710, 841, -280, -244, 274, -132, 273, 418, 432, -341,
           437, 360, 960, 195, 792, 106, 461, -35, 980, -80, 540, -358, 69, -26, -416, 597, 96, 533, 232, 755, 894, 331,
           323, -383, -386, 231, 436, 553, 967, 166, -151, 772, 434, 325, 301, 275, 431, 556, 728, 558, 702, 463, 127,
           984, 212, 876, -287, -16, -177, 577, 604, 116, 500, 653, 669, 916, 802, 817, 762, -210, -353, 144, -351, 777,
           805, 692, 22, -303, 249, 190, 411, 236, -274, 174, 380, 71, 124, -85, 430]
def perversion():
    l = len(numbers)
    def rec(n):
        if n < l:
            print(f'Элемент {n}: {numbers[n]}')
            rec(n+1)
    rec(0)
perversion()


""" Упражнение 4
Дана последовательность целых чисел. Напишите программу с использованием рекурсии, которая выводит эту 
последовательность в обратном порядке.
Формат входных данных
На вход программе подается последовательность целых чисел, каждое на отдельной строке. Концом последовательности 
является число 0. 
Формат выходных данных
Программа должна вывести введенные числа в обратном порядке, каждое на отдельной строке.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    1
    2
    3
    4
    0
Sample Output 1:
    0
    4
    3
    2
    1
Sample Input 2:
    0
Sample Output 2:
    0
"""
def print_num():
    def rec(num):
        if num != '0':
            rec(input())
        print(num)
    rec(input())

print_num()


""" Упражнение 5
Реализуйте функцию triangle() с использованием рекурсии, которая принимает один аргумент:
    h — натуральное число
Функция должна выводить звездный треугольник с высотой h в соответствии со следующим примером:
    ...
    *****
    ****
    ***
    **
    *
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию triangle(), но не код, 
вызывающий ее.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    triangle(3)
Sample Output 1:
    ***
    **
    *
Sample Input 2:
    triangle(5)
Sample Output 2:
    *****
    ****
    ***
    **
    *
"""
def triangle(h):
    if h > 0:
        print('*'*h)
        triangle(h-1)


""" Упражнение 6
Реализуйте функцию triangle() с использованием рекурсии, которая принимает один аргумент:
    h — натуральное число
Функция должна выводить звездный треугольник с высотой h в соответствии со следующим примером:
    *
    **
    ***
    ****
    *****
    ...
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию triangle(), но не код, 
вызывающий ее.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    triangle(3)
Sample Output 1:
    *
    **
    ***
Sample Input 2:
    triangle(5)
Sample Output 2:
    *
    **
    ***
    ****
    *****
"""
def triangle(h):
    if h > 0:
        triangle(h-1)
        print('*'*h)


""" Упражнение 7
Напишите программу с использованием рекурсивной функции, которая выводит изображение песочных часов, составленное из 
цифр 1, 2, 3, и 4:

1111111111111111    # 16 раз
  222222222222      # 12 раз
    33333333        # 8 раз
      4444          # 4 раза
    33333333        # 8 раз
  222222222222      # 12 раз
1111111111111111    # 16 раз
Формат входных данных
На вход программе ничего не подается.
Формат выходных данных
Программа должна вывести изображение песочных часов, составленное из цифр 1, 2, 3, и 4, представленное в условии задачи.
Примечание. Количество цифр в каждой строке, указанное в комментариях, выводить не нужно.
"""
def sand_clock():
    def rec(num):
        st = f'{" "*((num-1)*2)}{str(num)*(16 - (num-1)*4)}{" "*((num-1)*2)}'
        if num < 4:
            print(st)
            rec(num+1)
        print(st)
    rec(1)
sand_clock()


""" Упражнение 8
Реализуйте функцию print_digits() с использованием рекурсии, которая принимает один аргумент:
    number — натуральное число
Функция должна выводить все цифры числа number, начиная с младших разрядов, каждое на отдельной строке.
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию print_digits(), 
но не код, вызывающий ее.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    print_digits(12345)
Sample Output 1:
    5
    4
    3
    2
    1
Sample Input 2:
    print_digits(7)
Sample Output 2:
    7
"""
def print_digits(numbers):
    def rec(n):
        if n < len(str(numbers)):
            print((numbers % 10 ** (n+1))//10**n)
            rec(n+1)
    rec(0)

""" Упражнение 9
Реализуйте функцию print_digits() с использованием рекурсии, которая принимает один аргумент:
    number — натуральное число
Функция должна выводить все цифры числа number, начиная со старших разрядов, каждое на отдельной строке.
Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию print_digits(), 
но не код, вызывающий ее.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    print_digits(12345)
Sample Output 1:
    1
    2
    3
    4
    5
Sample Input 2:
    print_digits(2077)
Sample Output 2:
    2
    0
    7
    7
Sample Input 3:
    print_digits(8)
Sample Output 3:
    8
"""
def print_digits(numbers):
    def rec(n):
        if n < len(str(numbers)):
            rec(n+1)
            print((numbers % 10 ** (n+1))//10**n)
    rec(0)

""" Упражнение 1
Вам доступен список data, содержащий произвольные объекты. Дополните приведенный ниже код, чтобы он вывел все числа
(тип int и float), находящиеся в данном списке, отбрасывая дробную часть у вещественных чисел. Числа должны быть
расположены в своем исходном порядке, каждое на отдельной строке.
Примечание 1. Начальная часть ответа выглядит так:
    -16
    -202
    883
    ...
Примечание 2. В задаче удобно воспользоваться функциями map() и filter().
"""
data = ['Timur', -16.648911695768902, 'six', -202, 883.0093275936454, -765, (3, 4), -105.10718000213546, 976,
        -308.96857946288094, 458, ['one', 'two'], 479.92207220345927, -87, -71, 'twelve', 112, -621, -715.0179551194733,
        'seven', 229, 729, -358, [1, 2, 3], -974, 882, -894.4709033242768, '', 323.7720806756133, 'beegeek', -224, 431,
        170.6353248658936, -343.0016746052049, 'number', 104.17133679352878, [], -353.5964777099863, 'zero', -113, 288,
        None, -708.3036176571618]
print(*map(int, filter(lambda x: isinstance(x, int | float), data)), sep='\n')


""" Упражнение 2
Hам доступен список numbers, содержащий целые числа. Дополните приведенный ниже код, чтобы он вывел сумму квадратов всех 
двузначных чисел из данного списка, которые делятся на 9 без остатка.
Примечание 1. Обратите внимание, на 9 должно делиться само число, а не его квадрат.
Примечание 2. В задаче удобно воспользоваться функциями map() и filter().
"""
numbers = [4754, -4895, -364, -4764, 4683, 1639, -43, 228, -2701, -1503, 1223, 4340, -1296, 3939, -345, 623, -3275,
           1003, 4367, -1739, 550, -1217, -1334, 1526, -4359, -3028, -4663, 3356, 3887, 4297, -1982, 1013, 3299, 3556,
           -3324, 417, 3531, -3134, 1782, 4439, 1652, -985, 4327, 1517, 1225, -915, 2808, -3851, -1005, 3396, 2842,
           -3879, -3824, -3805, 1609, -4741, -3072, 3573, 4680, 588, -1430, 2378, -1095, -343, 4357, -2164, -3304, 4354,
           4926, -352, -1187, -3313, 2741, 4786, -2689, 741, 4558, 1442, 62, -1099, -2201, -16, -3115, 1862, 2384, 4072,
           -90, 204, 1158, -3134, -2512, 756, 4148, 4370, 1756, 3609, -1148, -3909, 4123, -2906, 69, 96, 1111]
print(sum(map(lambda x: x**2, filter(lambda x: -100 < x < 100 and x % 9 == 0, numbers))))


""" Упражнение 3
Вам доступен список names, содержащий имена на русском языке. Дополните приведенный ниже код, чтобы он вывел все имена, 
которые начинаются на буквы А и М (независимо от регистра) и имеют длину больше 44. Имена должны быть расположены в 
лексикографическом порядке, через пробел, каждое с заглавной буквы.
Примечание 1. Начальная часть ответа выглядит так:
Аделина Айлин Александр ...
Примечание 2. В задаче удобно воспользоваться функциями map() и filter(). 
"""
names = ['ульяна', 'арина', 'Дмитрий', 'Сергей', 'Яна', 'мила', 'Ольга', 'софья', 'семён', 'Никита', 'маргарита',
         'Василиса', 'Кирилл', 'александр', 'александра', 'Иван', 'андрей', 'Родион', 'максим', 'алиса', 'Артём',
         'софия', 'владимир', 'дамир', 'Валерий', 'степан', 'Алексей', 'Марк', 'олег', 'ирина', 'Милана', 'мия',
         'денис', 'Фёдор', 'Елизавета', 'айлин', 'Варвара', 'валерия', 'Алёна', 'Николь', 'юлия', 'Ксения', 'пётр',
         'георгий', 'Мария', 'глеб', 'илья', 'Захар', 'Дарья', 'Евгения', 'матвей', 'Серафим', 'екатерина', 'Тимофей',
         'виктор', 'Егор', 'Ника', 'анна', 'даниил', 'тихон', 'вера', 'кира', 'Эмилия', 'Виктория', 'Игорь', 'полина',
         'алина', 'Давид', 'анастасия', 'Вероника', 'ярослав', 'Руслан', 'татьяна', 'Демид', 'амелия', 'Элина', 'Арсен',
         'евгений', 'мадина', 'дарина', 'Савелий', 'Платон', 'Аделина', 'диана', 'Айша', 'павел', 'Стефания', 'Тимур',
         'Ева', 'Елисей', 'Артемий', 'григорий', 'Мирон', 'Мирослава', 'Мира', 'Марат', 'Лилия', 'роман', 'владислав',
         'Леонид']
print(*sorted(filter(lambda x: len(x) > 4 and (x[0] in ('А', 'М')), map(str.capitalize, names))))


""" Упражнение 4
Используя синтаксис анонимных функций, реализуйте рекурсивную функцию fib(), которая принимает один аргумент:
    n — натуральное число
Функция должна возвращать n-ый член последовательности Фибоначчи.
Примечание 1. Последовательность Фибоначчи – последовательность натуральных чисел, где каждое последующее число является 
суммой двух предыдущих: 
    1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию fib(), но не код, 
вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(fib(1))
Sample Output 1:
    1
Sample Input 2:
    print(fib(2))
Sample Output 2:
    1
Sample Input 3:
    print(fib(5))
Sample Output 3:
    5
"""
fib = lambda x: 1 if x <= 2 else fib(x-1) + fib(x-2)


""" Упражнение 5
Реализуйте функцию print_operation_table(), которая принимает три аргумента в следующем порядке:
    operation — функция, характеризующая некоторую бинарную операцию
    rows — натуральное число
    cols — натуральное число
Функция должна составлять и выводить таблицу из rows строк и cols столбцов, в которой элемент со строкой n и столбцом m 
имеет значение operation(n, m).
Примечание 1. Нумерация строк и столбцов в таблице начинается с единицы.
Примечание 2. Элементы в строках таблицы должны быть разделены одним пробелом, причем выравнивать таблицу необязательно.
Примечание 3. Бинарная операция — математическая операция, принимающая два аргумента и возвращающая один результат.
Примечание 4. В тестирующую систему сдайте программу, содержащую только необходимую функцию print_operation_table(), 
но не код, вызывающий ее.
Примечание 5. Тестовые данные доступны по ссылке.
Sample Input 1:
    print_operation_table(lambda a, b: a * b, 5, 5)
Sample Output 1:
    1   2   3   4   5
    2   4   6   8   10
    3   6   9   12  15
    4   8   12  16  20
    5   10  15  20  25
Sample Input 2:
    print_operation_table(pow, 5, 4)
Sample Output 2:
    1   1   1   1
    2   4   8   16
    3   9   27  81
    4   16  64  256
    5   25  125 625
"""
def print_operation_table(operation, rows, cols):
    lst = [[operation(x, y) for y in range(1, cols+1)] for x in range(1, rows+1)]
    mx = len(str(max(max(lst))))
    for line in lst:
        for sym in line:
            print(str(sym).ljust(mx+1, ' '), end='')
        print()


""" Упражнение 6
Реализуйте функцию verification(), которая проверяет правильность введенного пароля. Она должна принимать четыре 
аргумента в следующем порядке:
    login — логин пользователя
    password — пароль пользователя
    success — некоторая функция
    failure — некоторая функция
Пароль считается правильным, если в нем присутствует, хотя бы одна заглавная латинская буква, хотя бы одна строчная 
латинская буква и хотя бы одна цифра. Функция verification() должна вызывать функцию success() с аргументом login, если 
переданный пароль является правильным, иначе — функцию failure() с аргументами login и строкой-сообщением об ошибке:
    в пароле нет ни одной буквы, если в пароле отсутствуют латинские буквы
    в пароле нет ни одной заглавной буквы, если в пароле отсутствуют заглавные латинские буквы
    в пароле нет ни одной строчной буквы, если в пароле отсутствуют строчные латинские буквы
    в пароле нет ни одной цифры, если в пароле отсутствуют цифры
Примечание 1. Если пароль не удовлетворяет нескольким условиям, то приоритеты выбора строки-сообщения об ошибке являются 
следующими:
    в пароле нет ни одной буквы
    в пароле нет ни одной заглавной буквы
    в пароле нет ни одной строчной буквы
    в пароле нет ни одной цифры
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию verification(), но не код, 
вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    def success(login):
    print(f'Привет, {login}!')
    
    def failure(login, text):
    print(f'{login}, попробуйте снова. Ошибка: {text}')
    
    verification('timyrik20', 'Beegeek314', success, failure)
Sample Output 1:
    Привет, timyrik20!
Sample Input 2:
    def success(login):
        print(f'Здравствуйте, {login}!')
    
    def failure(login, text):
        print(f'{login}, попробуйте снова. Текст ошибки: {text}')
    
    verification('Ruslan_Chaniev', 'stepikstepik2', success, failure)
Sample Output 2:
    Ruslan_Chaniev, попробуйте снова. Текст ошибки: в пароле нет ни одной заглавной буквы
"""
from string import ascii_lowercase as alc
from string import ascii_uppercase as auc

def verification(login, password, success, failure):
    uc, lc, num = False, False, False
    text = ''
    for sym in password:
        if uc is False and sym in auc:
            uc = True
        if lc is False and sym in alc:
            lc = True
        if num is False and sym.isdigit():
            num = True
    if all([uc, lc, num]):
        success(login)
    if num is False:
        text = 'в пароле нет ни одной цифры'
    if lc is False:
        text = 'в пароле нет ни одной строчной буквы'
    if uc is False:
        text = 'в пароле нет ни одной заглавной буквы'
    if uc is False and lc is False:
        text = 'в пароле нет ни одной буквы'
    if text:
        failure(login, text)

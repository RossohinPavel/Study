""" Упражнение 1
Напишите программу, которая выводит все перестановки символов строки без дубликатов.
Формат входных данных
На вход программе подается произвольная строка из строчных латинских букв, длина которой не превышает 10 символов.
Формат выходных данных
Программа должна вывести все перестановки символов данной строки без дубликатов в алфавитном порядке,
каждую на отдельной строке.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    aab
Sample Output 1:
    aab
    aba
    baa
Sample Input 2:
    abc
Sample Output 2:
    abc
    acb
    bac
    bca
    cab
    cba
Sample Input 3:
    ab
Sample Output 3:
    ab
    ba
Sample Input 4:
    a
Sample Output 4:
    a
"""
import itertools as it
def func(string):
    yield from sorted(set(''.join(x) for x in it.permutations(string)))
print(*func(input()), sep='\n')


""" Упражнение 2
Тимур пришел в книжный магазин, чтобы приобрести новую книгу по математике, стоимость которой равна 100$. 
У него в кошельке имеется множество купюр различного номинала, которые представлены в списке wallet. Например, Тимур 
может расплатиться одной купюрой в 100$ или двумя по 50$.
Дополните приведенный ниже код, чтобы он вывел количество способов, которыми Тимур может приобрести книгу 
стоимостью 100$.
Примечание. Способы расплатиться наборами купюр вида 50, 20, 20, 10 20, 10, 50, 20 считаются одинаковыми и не должны 
учитываться повторно.
"""
import itertools as it
wallet = [100, 100, 50, 50, 50, 50, 20, 20, 20, 10, 10, 10, 10, 10, 5, 5, 1, 1, 1, 1, 1]
lst = []
for i in range(1, len(wallet)+1):
    for v in it.combinations(wallet, i):
        v = sorted(v)
        if sum(v) == 100 and v not in lst:
            lst.append(v)
print(len(lst))


""" Упражнение 3
Тимур пришел в книжный магазин, чтобы приобрести новую книгу по математике, стоимость которой равна 100$. У него в 
кошельке имеется неограниченное количество купюр, номиналы которых представлены в списке wallet. Другими словами, Тимур 
может использовать купюру одного номинала произвольное количество раз. Например, он может расплатиться пятью 
купюрами по 20$ или десятью по 10$.
Дополните приведенный ниже код, чтобы он вывел количество способов, которыми Тимур может приобрести книгу 
стоимостью 100$.
Примечание. Способы расплатиться наборами купюр вида 50, 20, 20, 10 и 20, 10, 50, 20 считаются одинаковыми и не должны 
учитываться повторно.
"""
import itertools as it
wallet = [100, 50, 20, 10, 5]
lst = []
for i in range(1, 21):
    for v in it.combinations_with_replacement(wallet, i):
        v = sorted(v)
        if sum(v) == 100 and v not in lst:
            lst.append(v)
print(len(lst))


""" Упражнение 4
Вам доступен список items, содержащий набор предметов. Каждый предмет представлен в виде именованного кортежа и имеет 
три параметра — название, массу (в граммах) и ценность (в рублях). Также имеется рюкзак определённой грузоподъёмности.
Напишите программу, которая определяет, какие предметы из представленного набора следует взять, чтобы собрать рюкзак 
с максимальной ценностью предметов внутри, соблюдая при этом весовое ограничение рюкзака.
Формат входных данных
На вход программе в первой строке подается число — грузоподъемность рюкзака (в граммах).
Формат выходных данных
Программа должна определить какие предметы из представленного набора следует взять, чтобы собрать рюкзак с максимальной 
ценностью предметов внутри, соблюдая при этом весовое ограничение рюкзака, и вывести названия полученных предметов в 
лексикографическом порядке, каждое на отдельной строке. Если рюкзак не позволяет взять ни один предмет, программа 
должна вывести текст:
Рюкзак собрать не удастся
Примечание 1. Рюкзак не обязательно должен быть наполнен полностью.
Примечание 2. Подробнее с задачей о рюкзаке можно ознакомиться по ссылке.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    500
Sample Output 1:
    Золотая монета
    Мобильный телефон
    Наушники
    Обручальное кольцо
    Ручка Паркер
Sample Input 2:
    1
Sample Output 2:
    Рюкзак собрать не удастся
Sample Input 3:
    10
Sample Output 3:
    Золотая монета
"""
from collections import namedtuple
import itertools as it

Item = namedtuple('Item', ['name', 'mass', 'price'])

items = [Item('Обручальное кольцо', 7, 49_000),
         Item('Мобильный телефон', 200, 110_000),
         Item('Ноутбук', 2000, 150_000),
         Item('Ручка Паркер', 20, 37_000),
         Item('Статуэтка Оскар', 4000, 28_000),
         Item('Наушники', 150, 11_000),
         Item('Гитара', 1500, 32_000),
         Item('Золотая монета', 8, 140_000),
         Item('Фотоаппарат', 720, 79_000),
         Item('Лимитированные кроссовки', 300, 80_000)]

weight = int(input())

lst = []

for i in range(1, len(items)+1):
    for v in it.combinations(items, i):
        v = sorted(v)
        if sum(x[1] for x in v) <= weight and v not in lst:
            lst.append(v)
if lst:
    for i in sorted(max(lst, key=lambda x: sum(y[2] for y in x)), key=lambda x: x[0]):
        print(i[0])
else:
    print('Рюкзак собрать не удастся')


""" Упражнение 5
Вам доступна программа, которая выводит все обозначения полей шахматной доски в алфавитном порядке через пробел.
Перепишите данную программу с использованием функции product(), чтобы она выполняла ту же задачу.
Примечание 1. Начальная часть ответа выглядит так:
a1 a2 a3 a4 a5 a6 a7 a8 b1 b2 ...
"""
from string import ascii_lowercase
from itertools import product

letters = ascii_lowercase[:8]
digits = [1, 2, 3, 4, 5, 6, 7, 8]

print(*map(lambda x: f'{x[0]}{x[1]}', product(letters, digits)))


""" Упражнение 6
Вам доступна функция password_gen(), которая возвращает генератор, порождающий все трехсимвольные строковые пароли в 
порядке возрастания, составленные из цифр от 0 до 9 включительно.
Перепишите данную функцию с использованием функции product(), чтобы она выполняла ту же задачу.
Примечание. В тестирующую систему сдайте программу, содержащую только необходимую функцию password_gen(), 
но не код, вызывающий ее.
Sample Input:
    passwords = password_gen()
    
    print(next(passwords))
    print(next(passwords))
    print(next(passwords))
Sample Output:
    000
    001
    002
"""
import itertools as it

def password_gen():
    yield from map(lambda x: f'{x[0]}{x[1]}{x[2]}', it.product(range(10), range(10), range(10)))


""" Упражнение 7
Напишите программу, которая генерирует в системе счисления nn все числа длины m.
Формат входных данных
На вход программе в первой строке подается натуральное число 16n≤16 — основание системы счисления, а затем натуральное 
число m — длина генерируемых чисел.
Формат выходных данных
Программа должна сгенерировать в системе счисления n все числа длины m и вывести их в порядке возрастания через пробел.
Примечание 1. В системах счислениях по основанию 11 и выше в качестве цифр должны использоваться заглавные латинские 
буквы:
A,B,C,D,...
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    2
    3
Sample Output 1:
    000 001 010 011 100 101 110 111
Sample Input 2:
    3
    2
Sample Output 2:
    00 01 02 10 11 12 20 21 22
"""
from string import ascii_uppercase
import itertools as it

lst = [*map(str, range(10))] + [*ascii_uppercase]
fl, lenght = int(input()), int(input())

print(*(''.join(x) for x in it.product(*[lst[:fl] for _ in range(lenght)])))



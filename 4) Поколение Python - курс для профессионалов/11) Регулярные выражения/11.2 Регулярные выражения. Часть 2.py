""" Упражнение 1
Вам доступно регулярное выражение regex, которому соответствуют строки car, cat и cab. Перепишите его с использованием
набора символов, чтобы ему соответствовали те же строки.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    car cat cab
Sample Output 1:
    car cat cab
Sample Input 2:
    Car cAt caB caaaaaat carrrrrr-kar
Sample Output 2:
    car
Sample Input 3:
    Cart carcat caBriolet Cabriolet cabriolet
Sample Output 3:
    car cat cab
"""
regex = r'ca[rtb]'


""" Упражнение 2
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют все 
шестнадцатеричные цифры. Предполагается, что шестнадцатеричные цифры образуют множество:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    my numbEr Phone Is +7-903-222-77-77
Sample Output 1:
    E 7 9 0 3 2 2 2 7 7 7 7
Sample Input 2:
    this is digit 10, A in hex 
Sample Output 2:
    1 0 A
Sample Input 3:
    a - 10, B - 11, c - 12, D - 13, E - 14, F - 15, G - 16
Sample Output 3:
    1 0 B 1 1 1 2 D 1 3 E 1 4 F 1 5 1 6
"""
regex = r'[0-9A-F]'


""" Упражнение 3
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности символов формата Xxxxx, где X — любая буква латинского алфавита в произвольном регистре, 
а x — произвольная цифра.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    Order 1: B938274, Order 2: T8372, Order 3: g883929
Sample Output 1:
    B9382 T8372 g8839
Sample Input 2:
    is valid number A123(-), a123(-), B12345(+), b12345(+)
Sample Output 2:
    B1234 b1234
Sample Input 3:
    check 123A123, - 5739bb1234b4 -, BOM999_19
Sample Output 3:
    b1234
"""
regex = r'[a-zA-Z]\d{4}'


""" Упражнение 4
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности символов длины 55, удовлетворяющие следующим условиям:
    первый символ — строчная латинская буква
    второй символ — произвольная цифра
    третий символ — строчная латинская буква
    четвертый символ — заглавная латинская буква
    пятый символ — заглавная латинская буква
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    My name is t1mUR and I am a1iVE!
Sample Output 1:
    t1mUR a1iVE
Sample Input 2:
    I read the l1eTTer
Sample Output 2:
    l1eTT
Sample Input 3:
    Stood u1pPP
Sample Output 3:
    u1pPP
"""
regex = r'[a-z]\d[a-z][A-Z][A-Z]'


""" Упражнение 5
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности символов длины 66, удовлетворяющие следующим условиям:
    первый символ — произвольная цифра
    второй символ — строчная латинская гласная буква (a, e, i, o, u, y)
    третий символ — любой символ, кроме b, c, D, F
    четвертый символ — любой не пробельный символ
    пятый символ — любой символ, кроме заглавной латинской гласной буквы (A, E, I, O, U, Y)
    шестой символ — любой символ, кроме точки и запятой
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    What password do you prefer: 9ython or 4uTUMN?
Sample Output 1:
    9ython 4uTUMN
Sample Input 2:
    Kate doesn’t eat_a_ any kind of meat nor wears she 1i -1) 1 at_a_
Sample Output 2:
    1i -1)
Sample Input 3:
    1Alark decided to stay at home #2aeb-Q): he had a terrible headache.
Sample Output 3:
    2aeb-Q
"""
regex = r'\d[aeiouy][^bcDF]\S[^AEIOUY][^.,]'


""" Упражнение 6
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности символов длины 6, удовлетворяющие следующим условиям:
    первый символ — цифра 1, 2 или 3
    второй символ — цифра 0, 1 или 2
    третий символ — цифра 1, 2 или строчная латинская буква x
    четвертый символ — цифра 0, 3 или латинская буква a в любом регистре
    пятый символ — строчная латинская буква x, s или u
    шестой символ — точка или запятая
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    I got two strange combinations: 22xAu, 1010x.
Sample Output 1:
    22xAu, 1010x.
Sample Input 2:
    _010x. A010x, 4010s. 1010s, 010u. '010u,
Sample Output 2:
    1010s,
Sample Input 3:
    0xAx. \0x3x, 1230xAs. --0xas, 90xAu. *0xau,
Sample Output 3:
    30xAs.
"""
regex = r'[1-3][0-2][12x][03aA][xsu][.,]'


""" Упражнение 7
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют телефонные 
номера следующих форматов:
    +7xxxxxxxxxx
    +7(xxx)xxxxxxx
    +7(xxx)-xxx-xx-xx
    +7 xxx xxx xx xx
где x — произвольная цифра.
Примечание 1. Дополнительная проверка телефонного номера на корректность не требуется.
Примечание 2. Символы +, ( и ) является метасимволами. Если требуется поиск соответствий самим символам  +, ( и ), 
то в регулярном выражении им должен предшествовать символ обратной косой черты  \+, \( и \).
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    Home: +7 927 991 13 31 Work: +7(917)-634-81-19 Alice: +89119873582 Arthur: +7(987)6639481 Timur: +79176879054
Sample Output 1:
    +7 927 991 13 31 +7(917)-634-81-19 +7(987)6639481 +79176879054
Sample Input 2:
    +7(917) 634 81 19 +7-917-634-81-19 +8(917)-634-81-19 +791768790541 +7 917 687 90 54
Sample Output 2:
    +79176879054 +7 917 687 90 54
"""
regex = r'\+7\d{10}|\+7\(\d{3}\)\d{7}|\+7\(\d{3}\)-\d{3}-\d{2}-\d{2}|\+7 \d{3} \d{3} \d{2} \d{2}'


""" Упражнение 8
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют даты 
следующих форматов:
    DD.MM.YYYY
    DD/MM/YYYY
    YYYY.MM.DD
    YYYY/MM/DD
Примечание 1. Дополнительная проверка даты на корректность не требуется.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    -- Exam days -- Math: 24.03.2022 Chemistry: 24/03/2022 Physics: 2022.03.25 France: 2022/03/29
Sample Output 1:
    24.03.2022 24/03/2022 2022.03.25 2022/03/29
Sample Input 2:
    first date: 01.12.22, second date: 01/12/22, thirs date 09.07.2003 07/09/2003
Sample Output 2:
    09.07.2003 07/09/2003
"""
regex = r'\d\d/\d\d/\d{4}|\d\d\.\d\d\.\d{4}|\d{4}\.\d\d\.\d\d|\d{4}/\d\d/\d\d'


""" Упражнение 9
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют времена 
формата HH:MM.
Примечание 1. Требуется дополнительная проверка на корректность, то есть время 54:96 не должно соответствовать 
регулярному выражению regex.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    So why does my watch say 91:44? It doesn't matter, I'll be there at 17:30
Sample Output 1:
    17:30
Sample Input 2:
    00:00, 00:60, 24:00, 50:39, 17/30
Sample Output 2:
    00:00
"""
regex = r'[01][0-9]:[0-5][0-9]|2[0-3]:[0-5][0-9]'

""" Упражнение 1
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют
Американские почтовые индексы, удовлетворяющие следующим условиям:
    почтовый индекс начинается с пяти цифр
    далее следует необязательная часть из четырех цифр, которая отделяется от пяти первых цифр дефисом
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    My old poscode: 18491
    And new: 48034-1234
Sample Output 1:
    18491 48034-1234
Sample Input 2:
    New postcode: 09090-8989, old postcode 0909-8989
Sample Output 2:
    09090-8989
Sample Input 3:
    New postcode: ABCDE-8989, old postcode 0909-, 01928-0909
Sample Output 3:
    01928-0909
"""
regex = r'(\d{5})(-\d{4})?'


""" Упражнение 2
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
Североамериканские номера телефонов, удовлетворяющие следующим условиям:
номер телефона начинается из трехцифрового кода города, который может заключаться в круглые скобки
далее через пробел или дефис следует номер с семью цифрами, разделенный на трехцифровой префикс и четырехцифровой номер 
линии, между которыми указывается дефис
В номере телефона могут использоваться любые цифры за двумя исключениям: первая цифра кода города и первая цифра 
префикса не могут быть 0 или 1.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    Glados: 248-555-1234
Sample Output 1:
    248-555-1234
Sample Input 2:
    Peter: (313) 555-1234
Sample Output 2:
    (313) 555-1234
Sample Input 3:
    Badeline: (810)-555-1234
Sample Output 3:
    (810)-555-1234
"""
regex = r'([2-9]\d{2}|\([2-9]\d{2}\))[ -][2-9]\d{2}-\d{4}'


""" Упражнение 3
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности символов, удовлетворяющие следующим условиям:
    последовательность должна состоять только из bee и geek
    последовательность должна содержать хотя бы один geek
    bee не может находиться рядом с самим собой (не может быть beebee)
    geek может появиться только после того, как до этого было записано bee
    после каждого bee когда-нибудь должен появиться geek
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    Correct name is beegeekbeegeek
Sample Output 1:
    beegeekbeegeek
Sample Input 2:
    hello beegeek_cyber_school
Sample Output 2:
    beegeek
Sample Input 3:
    beebeegeekgeekgeekbee
Sample Output 3:
    beegeekgeekgeek
"""
regex = r'bee(geek)+(bee(geek)+)*'


""" Упражнение 4
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности символов длины 6, удовлетворяющие следующим условиям:
    первый символ — строчная латинская буква
    второй символ — цифра, любая буква в произвольном регистре или символ нижнего подчеркивания
    третий символ — заглавная латинская буква
    четвертый символ должен совпадать с первым символом
    пятый символ должен совпадать со вторым символом
    шестой символ должен совпадать с третьим символом
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    Hello, User211, your verification number: z5Az5A
Sample Output 1:
    z5Az5A
Sample Input 2:
    Let's check case: 40H40H (not correct), 40Ha0H (not correct),  a_Ab_A (not correct), abCAbc (not correct), 
    a0Aa0A (correct)
Sample Output 2:
    a0Aa0A
Sample Input 3:
    j1Pj0p, jYOjQO, v-Ev-E, lsXl2X, m.Wm.W, m.Zm2Z, h0Nh0N 
Sample Output 3:
    h0Nh0N
"""
regex = r'([a-z])(\w)([A-Z])\1\2\3'


""" Упражнение 5
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют строки, 
содержащие три или более последовательных повторений ok.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    Ok, Jim. I said okok! okokokok!
Sample Output 1:
    okokokok
Sample Input 2:
    OkoKokokOk OKOKOKOKK okokok
Sample Output 2:
    okokok
Sample Input 3:
    okokokoko okokokokkkkkk
Sample Output 3:
    okokokok okokokok
"""
regex = r'(ok)\1{2,}'


""" Упражнение 6
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности символов, представляющие собой девятисимвольные палиндромы.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    What is palindrome? Examples: -._.-._.-, rotavator, abba, deleveled, 123454321
Sample Output 1:
    -._.-._.- rotavator deleveled 123454321
Sample Input 2:
    a1.-B-.1a
Sample Output 2:
    a1.-B-.1a
Sample Input 3:
    atri_c_irtjfien
Sample Output 3:
    tri_c_irt
"""
regex = r'(.)(.)(.)(.).\4\3\2\1'


""" Упражнение 7
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют слова, 
содержащие повторяющиеся буквы.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    I have one apple, one banana and one strawberry
Sample Output 1:
    apple banana strawberry
Sample Input 2:
    Priveeeet my dear friend 
Sample Output 2:
    Priveeeet
Sample Input 3:
    fuisopf gheos, geisslp
Sample Output 3:
    fuisopf geisslp
"""
regex = r'\b\w*(\w)\w*\1\w*\b'


""" Упражнение 8
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют 
последовательности из 8 цифр. Причем последовательность может содержать символы дефиса - в качестве разделителей, 
только если они делят ее на группы по 22 цифры.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    Digits from 0 to 7: 01234567
Sample Output 1:
    01234567
Sample Input 2:
    Digits from 1 to 8 by groups: 12-34-56-78
Sample Output 2:
    12-34-56-78
Sample Input 3:
    Digits from 1 to 8 by groups: 1234-5678
Sample Output 3:
"""
regex = r'(\d{8}|\d{2}(-\d{2}){3})'


""" Упражнение 9
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют
последовательности из 8 цифр, удовлетворяющие следующим условиям:
последовательность может содержать символы -, --- или . в качестве разделителей, только если они делят ее 
на группы по 2 цифры
последовательность должна содержать только один тип разделителя, если он присутствует
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    I have some groups of digits. Do you want to see? 11-22-33-44
Sample Output 1:
    11-22-33-44
Sample Input 2:
    Look at this: 12345678
Sample Output 2:
    12345678
Sample Input 3:
    1-2-3-4-5-6-7-89-w9--99
Sample Output 3:
"""
regex = r'\d{8}|\d{2}(-|---|\.)\d{2}\1\d{2}\1\d{2}'


""" Упражнение 10
Дополните приведенный ниже код, чтобы переменная regex содержала регулярное выражение, которому соответствуют слова, 
записанные дважды подряд. Слова могут быть разделены одним или несколькими пробелами.
Примечание 1. Словом будем считать последовательность символов, соответствующих \w, окруженную символами,
соответствующими \W
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    One can can become a writer only  only if he is   is talented
Sample Output 1:
    can can only  only is   is
Sample Input 2:
    f fa fa
Sample Output 2:
    fa fa
Sample Input 3:
    tuk tak
Sample Output 3:
"""
regex = r'(\b\w+\b)[ ]+\b\1\b'

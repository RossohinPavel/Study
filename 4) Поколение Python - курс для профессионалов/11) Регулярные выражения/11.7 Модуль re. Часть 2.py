""" Упражнение 1
Вам доступна переменная article, содержащая некоторый многострочный текст. Дополните приведенный ниже код, чтобы
он определил:
    количество строк, которые начинаются со слова Stepik (в произвольном регистре);
    количество строк, которые оканчиваются тремя точками ... или восклицательным знаком !.
и вывел два соответствующих числа, каждое на отдельной строке.
Примечание 1. Строка может одновременно удовлетворять обоим условиям.
Примечание 2. Тестовые данные доступны по ссылке.
"""
import re
article = '''Stepik (до августа 2016 года Stepic) — это образовательная платформа и конструктор онлайн-курсов!

Первые образовательные материалы были выпущены на Stepik 3 сентября 2013 года.
В январе 2016 года Stepik выпустил мобильные приложения под iOS и Android. В 2017 году разработаны мобильные приложения 
для изучения ПДД в адаптивном режиме для iOS и Android...

На октябрь 2020 года на платформе зарегистрировано 5 миллионов пользователей!
Stepik позволяет любому зарегистрированному пользователю создавать интерактивные обучающие уроки и онлайн-курсы, 
используя видео, тексты и разнообразные задачи с автоматической проверкой и моментальной обратной связью. 

Проект сотрудничает как с образовательными учреждениями, так и c индивидуальными преподавателями и авторами.  
Stepik сегодня предлагает онлайн-курсы от образовательных организаций, а также индивидуальных авторов!

Система автоматизированной проверки задач Stepik была использована в ряде курсов на платформе Coursera, включая курсы по 
биоинформатике от Калифорнийского университета в Сан-Диего и курс по анализу данных от НИУ «Высшая школа экономики»...

Stepik также может функционировать как площадка для проведения конкурсов и олимпиад, среди проведённых мероприятий — 
отборочный этап Олимпиады НТИ (2016—2020) (всероссийской инженерной олимпиады школьников, в рамках программы 
Национальная технологическая инициатива), онлайн-этап акции Тотальный диктант в 2017 году, соревнования по 
информационной безопасности StepCTF-2015...'''

cs = 0
cc = 0
for i in article.split('\n'):
    if re.match(r'Stepik', i, re.I):
        cs += 1
    if re.match(r'\.\.\.|!', i[::-1]):
        cc += 1

print(cs, cc, sep='\n')


""" Упражнение 2
Напишите программу, которая принимает на вход строку текста и некоторое слово и определяет, сколько раз данное слово 
встречается как подслово в введенном тексте.
Формат входных данных
На вход программе на первой строке подается текст, на второй — слово.
Формат выходных данных
Программа должна определить, сколько раз данное слово встречается как подслово в введенном тексте, и вывести 
полученный результат.
Примечание 1. Словом будем считать последовательность символов, соответствующих \w, окруженную символами, 
соответствующими \W. Подсловом же будет являться последовательность символов, соответствующих \w, окруженная символами, 
соответствующими \w. Например, is является подсловом optimist, а age не является подсловом ageless.
Примечание 2. Программа должна учитывать регистр. То есть, например, слова Python и python считаются разными.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    existing pessimist optimist this is
    is
Sample Output 1:
    3
Sample Input 2:
    I love Python very much, what about me hahah
    ha
Sample Output 2:
    2
Sample Input 3:
    thdbakru rubabadjso babadirnid iehedba  ibebibeb duabafbf
    ba
Sample Output 3:
    5
"""
import re

string = input()
ss = fr'\B{input()}\B'
print(len(re.findall(ss, string)))


""" Упражнение 3
Напишите программу, которая принимает на вход строку текста и некоторое слово и определяет, сколько вхождений данного 
слова содержится в введенном тексте.
Формат входных данных
На вход программе на первой строке подается текст, на второй — слово.
Формат выходных данных
Программа должна определить, сколько вхождений данного слова содержится в веденном тексте, и вывести полученный 
результат.
Примечание 1. Словом будем считать последовательность символов, соответствующих \w, окруженную символами, 
соответствующими \W.
Примечание 2. Рассмотрим первый тест, в котором содержится 66 вхождений слова foo:
    foo bar (foo) bar foo-bar foo_bar foo'bar bar-foo bar, foo.
    foo_bar же является самостоятельным словом.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    foo bar (foo) bar foo-bar foo_bar foo'bar bar-foo bar, foo.
    foo
Sample Output 1:
    6
Sample Input 2:
    Sunday, Monday, Tuesday, Wednesday
    day
Sample Output 2:
    0
Sample Input 3:
    Hhelo Hey Human hacker
    H
Sample Output 3:
    0
"""
import re

string = input()
ss = fr'\b{input()}\b'

print(len(re.findall(ss, string)))


""" Упражнение 4
Американский английский и Британский английский языки имеют несколько различий, одно из которых наблюдается в написании 
слов. Например, слова, написанные на Американском английском языке и имеющие суффикс ze, в Британском варианте языка 
часто записываются с использованием суффикса se. 
Напишите программу, которая определяет, сколько раз слово встречается в тексте, учитывая его Британско-Американское 
написание.
Формат входных данных
На вход программе на первой строке подается слово, которое может быть записано как в Британском, так в Американском 
варианте, а на следующей — текст.
Формат выходных данных
Программа должна определить, сколько раз введенное слово встречается в тексте, учитывая его Британско-Американское 
написание, и вывести полученный результат.
Примечание 1. Словом будем считать последовательность символов, соответствующих \w, окруженную символами, 
соответствующими \W.
Примечание 2. Программа должна игнорировать регистр. То есть, например, слова Python и python считаются одинаковыми.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    Familiarize
    stepik has such a good ui that it takes no time to familiarise its environment. To familiarize oneself with ui of 
    stepik is easy
Sample Output 1:
    2
Sample Input 2:
    Gseze
    Gzeze Gsese Gseze Gzese
Sample Output 2:
    2
"""
import re

pat = input()
ss = fr'\b{pat[:-2]}se\b|\b{pat[:-2]}ze\b'
print(len(re.findall(ss, input(), re.I)))


""" Упражнение 5
В одной из предыдущих задач мы уже наблюдали различие в написании Британских и Американских слов. Еще одно различие 
заключается в том, что Британия сохранила использование сочетания букв our в своих словах, в то время как Америка 
отказалась от буквы u и использует лишь or.
Напишите программу, которая определяет, сколько раз слово встречается в тексте, учитывая его Британско-Американское 
написание.
Формат входных данных
На вход программе на первой строке подается слово, которое записано в Британском варианте, а на следующей — текст.
Формат выходных данных
Программа должна определить, сколько раз введенное слово встречается в тексте, учитывая его Британско-Американское 
написание, и вывести полученный результат.
Примечание 1. Словом будем считать последовательность символов, соответствующих \w, окруженную символами, 
соответствующими \W.
Примечание 2. Гарантируется, что введенное слово состоит из 44 или более букв.
Примечание 3. Программа должна игнорировать регистр. То есть, например, слова Python и python считаются одинаковыми.
Примечание 4. Тестовые данные доступны по ссылке.
Sample Input 1:
    Odour
    the odour coming out of the left over food was intolerable. Ammonia has a very pungent odor
Sample Output 1:
    2
Sample Input 2:
    hour
    a lot of Hour or hor
Sample Output 2:
    2
"""
import re
word = input()
string = input()
print(len(re.findall(fr'\b({word}|{word[:-2]+"r"})\b', string, re.I)))


""" Упражнение 6
Аббревиатура — слово, образованное сокращением слова или словосочетания и читаемое по алфавитному названию начальных 
букв или по начальным звукам слов, входящих в него.
Реализуйте функцию abbreviate(), которая принимает один аргумент:
phrase — фраза
Функция должна создавать из фразы phrase аббревиатуру в верхнем регистре и возвращать её.
Примечание 1. В аббревиатуре должны присутствовать как начальные буквы слов, так и начальные буквы подслов, начинающихся 
с заглавной буквы, например, JavaScript Object Notation -> JSON.
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию abbreviate(), но не код, 
вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(abbreviate('javaScript object notation'))
Sample Output 1:
    JSON
Sample Input 2:
    print(abbreviate('frequently asked questions'))
Sample Output 2:
    FAQ
Sample Input 3:
    print(abbreviate('JS game sec'))
Sample Output 3:
    JSGS
"""
import re

def abbreviate(phrase):
    return ''.join(re.findall(r'[A-Z]|\b\w', phrase)).upper()


""" Упражнение 7
HTML-элементы — основа языка HTML. Каждый HTML-элемент обозначается начальным (открывающим) и конечным (закрывающим) 
тегами. Открывающий и закрывающий теги содержат имя элемента. Открывающий тег может содержать дополнительную информацию 
— атрибуты и значения атрибутов. Гиперссылки в языке HTML создаются с помощью тега <a></a>. Внутрь помещается текст, 
который будет отображаться на веб-странице. Обязательной составляющей тега <a></a> является атрибут href, который задает 
URL-адрес веб-страницы:
    <a href="https://stepik.org">Stepik</a>  
Гиперссылка состоит из двух частей — указателя (Stepik) и адресной части (https://stepik.org). Указатель ссылки 
представляет собой фрагмент текста или изображение, видимые для пользователя. Адресная часть ссылки пользователю 
не видна, она представляет собой адрес ресурса, к которому необходимо перейти. Иногда указатель может быть окружен 
различными тегами (<b></b>, <h1></h1>):
    <a href="https://stepik.org"><b><h1>Stepik</b></h1></a>  
Напишите программу, которая находит во фрагменте HTML-страницы все гиперссылки и выводит их составляющие — адресные 
части и указатели.
Формат входных данных
На вход программе подается произвольное количество строк, которые образуют фрагмент HTML-страницы.
Формат выходных данных
Программа должна найти в введенном фрагменте HTML-страницы все гиперссылки и вывести их составляющие — адресные части и 
указатели, в следующем формате:
    <адресная часть>, <указатель>
    <адресная часть>, <указатель>
    ...
Примечание 1. Порядок следования данных об очередной гиперссылке должен совпадать с порядком их следования в введенном 
фрагменте HTML-страницы.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    <p><a href="https://stepik.org">Stepik</a></p>
    <p><a href="https://beegeek.ru"><b>BEEGEEK</b></a></p>
Sample Output 1:
    https://stepik.org, Stepik
    https://beegeek.ru, <b>BEEGEEK</b>
Sample Input 2:
    <div id="oldie-warning" class="do-not-print">
        <p>
            <strong>Notice:</strong> Your browser is <em>ancient</em>. Please
            <a href="http://browsehappy.com/">upgrade to a different browser</a> to experience a better web.
        </p>
    </div>
Sample Output 2:
    http://browsehappy.com/, upgrade to a different browser
"""
import re
import sys

for i in sys.stdin:
    string = re.findall(r'(<a href=")(.*)(</a>)', i.strip('\n'))
    if string:
        string = string[0][1].split('">')
        print(*string, sep=', ')


""" Упражнение 8
HTML-элементы — основа языка HTML. Каждый HTML-элемент обозначается начальным (открывающим) и конечным (закрывающим) 
тегами. Открывающий и закрывающий теги содержат имя элемента. Открывающий тег может содержать дополнительную информацию 
— атрибуты и значения атрибутов:
    <b>BeeGeek</b>
    <a href="https://stepik.org">Stepik</a>
В примере выше тег <b> не содержит никаких атрибутов, а тег <a> содержит атрибут href со значением https://stepik.org.
Напишите программу, которая находит во фрагменте HTML-страницы все атрибуты каждого тега.
Формат входных данных
На вход программе подается произвольное количество строк, которые образуют фрагмент HTML-страницы.
Формат выходных данных
Программа должна найти в введенном фрагменте HTML-страницы все теги и вывести их, указав для каждого соответствующие 
атрибуты. Теги вместе со всеми атрибутами должны быть расположены каждый на отдельной строке, в следующем формате:
    <тег>: <атрибут>, <атрибут>, ...
Теги, а также атрибуты тегов, должны быть расположены в лексикографическом порядке.
Примечание 1. Тестовые данные доступны по ссылке.
Примечание 2. Некоторые теги не требуют закрытия. Об этом можно почитать здесь.
Sample Input 1:
    <p><a href="https://stepik.org">Stepik</a></p>
    <div class="catalog"><a href="https://stepik.org/catalog">Study hard. Teach harder</a></div>
Sample Output 1:
    a: href
    div: class
    p:
Sample Input 2:
    <div id="oldie-warning" class="do-not-print">
        <p>
            <strong>Notice:</strong> Your browser is <em>ancient</em>. Please
            <a href="http://browsehappy.com/">upgrade to a different browser</a> to experience a better web.
        </p>
    </div>
Sample Output 2:
    a: href
    div: class, id
    em:
    p:
    strong:
"""
import re
import sys

dct = {}

for i in sys.stdin:
    i = i.strip('\n')
    for x in re.findall(r'<(.+?)>', i):
        if x.startswith('/'):
            continue
        if '=' in x:
            tag = re.findall(r'(^.+?)\s', x)
            atr = re.findall(r'\s(\S+?)="', x)
            dct.setdefault(tag[0], []).extend(atr)
        else:
            dct[x] = []

for i in sorted(dct):
    print(i + ':', ", ".join(sorted(set(dct[i]))))

""" Упражнение 1
Напишите программу, которая разбивает строку по символам точки, запятой и точки с запятой.
Формат входных данных
На вход программе подается строка, содержащая различные значения, разделенные символами точки ., запятой , или точки
с запятой ;, вокруг которых могут располагаться пробелы.
Формат выходных данных
Программа должна разбить введенную строку по символам точки, запятой и точки с запятой, захватывая вокруг стоящие
пробелы, и вывести все значения, полученные при разбиении, через пробел.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    bee,geek . Python   ,  C++
Sample Output 1:
    bee geek Python C++
Sample Input 2:
    py py; hi  hi; go-go-go
Sample Output 2:
    py py hi  hi go-go-go
Sample Input 3:
    arthur;timur,dima.anri
Sample Output 3:
    arthur timur dima anri
"""
import re

print(' '.join(re.split(r'', input())))


""" Упражнение 2
Дано логическое выражение, состоящее из переменных, а также операторов |, &, and или or. Напишите программу, которая 
разбивает данную строку по указанным операторам.
Формат входных данных
На вход программе подается строка, содержащая логическое выражение, которое состоит из переменных и операторов |, &, 
and или or, между которыми могут располагаться пробелы.
Формат  выходных данных
Программа должна разбить введенную строку по указанным логическим операторам, захватывая вокруг стоящие пробелы, 
и вывести все значения, полученные при разбиении, через запятую и пробел.
Примечание. Тестовые данные доступны по ссылке.
Sample Input 1:
    a and b or c
Sample Output 1:
    a, b, c
Sample Input 2:
    x   &   y   |   z
Sample Output 2:
    x, y, z
Sample Input 3:
    X&Y|Z&W
Sample Output 3:
    X, Y, Z, W
"""
import re

print(', '.join(re.split(r'\s*and\s*|\s*or\s*|\s*[&\|]\s*', input())))


""" Упражнение 3
Реализуйте функцию multiple_split(), которая принимает два аргумента:
    string — строка
    delimiters — список строк
Функция должна разбивать строку string на подстроки, используя в качестве разделителей строки из списка delimiters, 
и возвращать полученный результат в виде списка.
Примечание 1. Другими словами, функция multiple_split() должна работать аналогично строковому методу split(), 
за тем исключением, что delimiters может содержать не единственный разделитель, а целый набор разделителей.
Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию multiple_split(), но не код, 
вызывающий ее.
Примечание 3. Тестовые данные доступны по ссылке.
Sample Input 1:
    print(multiple_split('beegeek-python.stepik', ['.', '-']))
Sample Output 1:
    ['beegeek', 'python', 'stepik']
Sample Input 2:
    print(multiple_split('Timur---Arthur+++Dima****Anri', ['---', '+++', '****']))
Sample Output 2:
    ['Timur', 'Arthur', 'Dima', 'Anri']
Sample Input 3:
    print(multiple_split('timur.^[+arthur.^[+dima.^[+anri.^[+roma.^[+ruslan', ['.^[+']))
Sample Output 3:
    ['timur', 'arthur', 'dima', 'anri', 'roma', 'ruslan']
"""
import re

def multiple_split(string, delim):
    return re.split(r'---', string)


""" Упражнение 4
Напишите программу, которая складывает все натуральные числа в строке, находящиеся в указанном диапазоне индексов.
Формат входных данных
На вход программе сначала подаются два целых положительных числа a и b, разделенные пробелом, а затем — строка.
Формат выходных данных
Программа должна вывести сумму всех натуральных чисел в введенной строке, находящихся в диапазоне индексов от a 
(включительно) до b (не включительно). Если в указанном диапазоне нет ни одного числа, программа должна вывести 0.
Примечание 1. Натуральным числом будем считать последовательность символов, соответствующих \d, окруженную символами, 
соответствующими \D.
Примечание 2. Тестовые данные доступны по ссылке.
Sample Input 1:
    0 5
    11:20 a.m. - 12:00 p.m
Sample Output 1:
    31
Sample Input 2:
    0 10
    Нет ни одного числа в этой строке
Sample Output 2:
    0
Sample Input 3:
    0 100
    Нет ни одного числа в этой строке
Sample Output 3:
    0
"""
import re

st, ed = map(int, input().split())
dgt = re.compile(r'\d+')
print(sum(map(int, dgt.findall(input(), st, ed))))

""" Упражнение 1
Реализуйте контекстный менеджер make_tag с помощью декоратора @contextmanager, который принимает один аргумент:
    tag — произвольная строка
Контекстный менеджер должен выводить строку tag при входе в блок with и после выхода из блока with.
Примечание 1. Наглядные примеры использования контекстного менеджера make_tag продемонстрированы в тестовых данных.
Примечание 2. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный контекстный
менеджер используется только с корректными данными.
Sample Input:
    with make_tag('---'):
        print('Поколение Python')
Sample Output:
    ---
    Поколение Python
    ---
"""
from contextlib import contextmanager

@contextmanager
def make_tag(tag):
    print(tag)
    yield
    print(tag)


""" Упражнение 2
Реализуйте контекстный менеджер reversed_print с помощью декоратора @contextmanager, который не принимает никаких 
аргументов.
Контекстный менеджер reversed_print должен позволять выполнять все операции записи в стандартный поток вывода sys.stdout 
внутри блока with в обратном порядке.
Примечание 1. Наглядные примеры использования класса reversed_print продемонстрированы в тестовых данных.
Примечание 2. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный контекстный 
менеджер используется только с корректными данными.
Sample Input 1:
    print('Вывод вне блока with')
    
    with reversed_print():
        print('Вывод внутри блока with')
    
    print('Вывод вне блока with')
Sample Output 1:
    Вывод вне блока with
    htiw аколб иртунв довыВ
    Вывод вне блока with
Sample Input 2:
    with reversed_print():
        print('python')
        print('beegeek')
    
    print('Вывод вне блока with')
Sample Output 2:
    nohtyp
    keegeeb
    Вывод вне блока with
Sample Input 3:
    print('Если жизнь одаривает вас лимонами — не делайте лимонад')
    print('Заставьте жизнь забрать их обратно!')
    
    with reversed_print():
        print('Мне не нужны твои проклятые лимоны!')
        print('Что мне с ними делать?')
    
    print('Требуйте встречи с менеджером, отвечающим за жизнь!')
Sample Output 3:
    Если жизнь одаривает вас лимонами — не делайте лимонад
    Заставьте жизнь забрать их обратно!
    !ыномил еытялкорп иовт ынжун ен енМ
    ?ьталед имин с енм отЧ
    Требуйте встречи с менеджером, отвечающим за жизнь!
"""
from contextlib import contextmanager
import sys

@contextmanager
def reversed_print():
    standart = sys.stdout.write
    sys.stdout.write = lambda x: standart(x[::-1])
    yield
    sys.stdout.write = standart


""" Упражнение 3
Реализуйте контекстный менеджер safe_write с помощью декоратора @contextmanager, который принимает один аргумент:
    filename — имя файла
Контекстный менеджер должен открывать файл с именем filename в режиме w и позволять выполнять с ним соответствующие 
операции. Причем если во время записи в файл было возбуждено какое-либо исключение, контекстный менеджер должен 
поглотить его, отменить все выполненные ранее записи в файл, если они были, вернуть файл в исходное состояние и 
проинформировать о возбужденном исключении выводом следующего текста:
    Во время записи в файл было возбуждено исключение <тип исключения>
Примечание 1. Наглядные примеры использования контекстного менеджера safe_write продемонстрированы в тестовых данных.
Примечание 2. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный контекстный 
менеджер используется только с корректными данными.
Sample Input 1:
    with safe_write('undertale.txt') as file:
        file.write('Тень от руин нависает над вами, наполняя вас решительностью')
        
    with open('undertale.txt') as file:
        print(file.read())
Sample Output 1:
    Тень от руин нависает над вами, наполняя вас решительностью
Sample Input 2:
    with safe_write('undertale.txt') as file:
        file.write('Тень от руин нависает над вами, наполняя вас решительностью\n')
        
    with safe_write('undertale.txt') as file:
        print('Под весёлый шорох листвы вы наполняетесь решительностью', file=file)
        raise ValueError
    
    with open('undertale.txt') as file:
        print(file.read())
Sample Output 2:
    Во время записи в файл было возбуждено исключение ValueError
    Тень от руин нависает над вами, наполняя вас решительностью
"""
from contextlib import contextmanager

@contextmanager
def safe_write(filename):
    try:
        temp = open('temp.txt', 'w', encoding='UTF-8')
        yield temp
        temp.close()
        temp = open('temp.txt', 'r', encoding='UTF-8')
        safe = open(filename, 'w', encoding='UTF-8')
        safe.write(temp.read())
        temp.close()
        safe.close()
    except Exception as e:
        print(f'Во время записи в файл было возбуждено исключение {type(e).__name__}')


""" Упражнение 4
Реализуйте контекстный менеджер safe_open с помощью декоратора @contextmanager, который принимает два аргумента 
в следующем порядке:
    filename — имя файла
    mode — режим открытия файла (r, w, a и так далее), по умолчанию имеет значение r
Контекстный менеджер должен открывать файл с именем filename в режиме mode и позволять выполнять с ним соответствующие 
операции. Причем если открытие файла было выполнено без исключений, в качестве значения, используемого в блоке with, 
контекстный менеджер должен вернуть кортеж из двух элементов, первым из которых является необходимый файловый объект, 
вторым — значение None. Однако если при открытии файла было возбуждено исключение, то в качестве значения, используемого 
в блоке with, контекстный менеджер должен вернуть кортеж из двух элементов, первым из которых является значение None, 
вторым — возбужденное при открытии исключение. Также контекстный менеджер должен закрывать открытый им файл после 
выполнения кода внутри блока with.
Примечание 1. Наглядные примеры использования контекстного менеджера safe_open продемонстрированы в тестовых данных.
Примечание 2. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный контекстный 
менеджер используется только с корректными данными.
Sample Input 1:
    with open('Ellies_jokes.txt', 'w') as file:
        file.write('Знаешь, кто не прав? Лев\n')
        file.write('Что треугольник сказал кругу? Катись отсюда')
        
    with safe_open('Ellies_jokes.txt') as file:
        file, error = file
        print(error)
        print(file.read())
Sample Output 1:
    None
    Знаешь, кто не прав? Лев
    Что треугольник сказал кругу? Катись отсюда
Sample Input 2:
    with safe_open('Ellies_jokes_2.txt') as file:
        file, error = file
        print(file)
        print(error)
Sample Output 2:
    None
    [Errno 2] No such file or directory: 'Ellies_jokes_2.txt'
"""
from contextlib import contextmanager

@contextmanager
def safe_open(filename, mode='r'):
    try:
        file = open(filename, mode)
        yield file, None
    except Exception as e:
        yield None, e
    else:
        file.close()
